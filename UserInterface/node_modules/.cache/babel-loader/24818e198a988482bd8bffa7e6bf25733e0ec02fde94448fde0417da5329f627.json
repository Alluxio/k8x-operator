{"ast":null,"code":"var _jsxFileName = \"/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/pages/dataset-controller.jsx\";\nimport React, { Component } from 'react';\nimport CreateDataset from \"../components/dataset/CreateDataset\";\nimport Datasets from \"../components/dataset/Datasets\";\nimport OperatorAlert from \"../components/alert/Alert\";\nimport { AlertMethod } from \"../components/alert/Alert\";\nimport { sendRequest } from \"../components/util\";\nimport { getRequest } from \"../components/util\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function isJSON(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\nclass DatasetController extends Component {\n  constructor(props) {\n    super(props);\n    this.handleGetRequest = () => {\n      // Call getRequest\n\n      getRequest(this.state.serverUrl).then(statusCodeAndMsg => {\n        this.setState({\n          alertMethod: statusCodeAndMsg[0],\n          alertMessage: statusCodeAndMsg[1]\n        });\n      });\n    };\n    // handleSendRequest is a func that will call  and update the panel status\n    this.handleSendRequest = (stringifyJSON, httpMethod) => {\n      // Check the str is JSON or not\n      if (!isJSON(stringifyJSON)) {\n        console.error('This is not a JSON file');\n        this.setState({\n          alertMethod: AlertMethod.Warning,\n          alertMessage: 'This is not a JSON file.'\n        });\n        return;\n      }\n\n      // Prep Http request\n      const requestOptions = {\n        method: httpMethod,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: stringifyJSON\n      };\n\n      // Call sendRequest\n      sendRequest(requestOptions, this.state.serverUrl).then(statusCodeAndMsg => {\n        this.setState({\n          alertMethod: statusCodeAndMsg[0],\n          alertMessage: statusCodeAndMsg[1]\n        });\n      });\n    };\n    this.handleCleanAlertStatus = () => {\n      this.setState({\n        alertMethod: AlertMethod.NoStatus,\n        alertMessage: ''\n      });\n    };\n    this.state = {\n      serverUrl: '/dataset',\n      isLoaded: false,\n      datasetListJSON: JSON,\n      alertMethod: AlertMethod.NoStatus,\n      alertMessage: ''\n    };\n    this.fetchData = this.fetchData.bind(this);\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.fetchData();\n    }, 2000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  async fetchData() {\n    // console.log(\"Fetch data\")\n    try {\n      const response = await fetch(this.state.serverUrl);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const result = await response.json();\n      this.setState({\n        isLoaded: true,\n        datasetListJSON: result.datasets\n      });\n    } catch (error) {\n      console.error(error);\n      this.setState({\n        isLoaded: false,\n        alertMessage: error\n      });\n    }\n  }\n  render() {\n    const {\n      isLoaded,\n      datasetListJSON\n    } = this.state;\n    if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Dataset\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Dataset Controller Panel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Unable to Connect \", this.state.serverUrl, \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Dataset\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Dataset Controller Panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Datasets, {\n        datasetListJSON: datasetListJSON,\n        handleSendRequest: this.handleSendRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CreateDataset, {\n        handleSendRequest: this.handleSendRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(OperatorAlert, {\n        alertMethod: this.state.alertMethod,\n        alertMessage: this.state.alertMessage,\n        handleCleanAlertStatus: this.handleCleanAlertStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default DatasetController;","map":{"version":3,"names":["React","Component","CreateDataset","Datasets","OperatorAlert","AlertMethod","sendRequest","getRequest","jsxDEV","_jsxDEV","isJSON","str","JSON","parse","e","DatasetController","constructor","props","handleGetRequest","state","serverUrl","then","statusCodeAndMsg","setState","alertMethod","alertMessage","handleSendRequest","stringifyJSON","httpMethod","console","error","Warning","requestOptions","method","headers","body","handleCleanAlertStatus","NoStatus","isLoaded","datasetListJSON","fetchData","bind","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","response","fetch","ok","Error","result","json","datasets","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/pages/dataset-controller.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport CreateDataset from \"../components/dataset/CreateDataset\";\nimport Datasets from \"../components/dataset/Datasets\";\nimport OperatorAlert from \"../components/alert/Alert\";\nimport {AlertMethod} from \"../components/alert/Alert\";\nimport {sendRequest} from \"../components/util\";\nimport {getRequest} from \"../components/util\";\n\n\nexport function isJSON(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\nclass DatasetController extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            serverUrl: '/dataset',\n            isLoaded: false,\n\n            datasetListJSON: JSON,\n\n            alertMethod: AlertMethod.NoStatus,\n            alertMessage: '',\n        };\n\n        this.fetchData = this.fetchData.bind(this)\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.fetchData();\n\n\n\n        }, 2000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    async fetchData() {\n    // console.log(\"Fetch data\")\n    try {\n        const response = await fetch(this.state.serverUrl)\n        if (!response.ok) { throw new Error('Network response was not ok');}\n\n        const result = await response.json();\n        this.setState({\n            isLoaded: true,\n            datasetListJSON : result.datasets,\n        });\n    } catch (error) {\n        console.error(error);\n        this.setState({\n            isLoaded: false,\n            alertMessage: error\n        });\n    }\n    }\n\n    handleGetRequest = () =>  {\n        // Call getRequest\n\n        getRequest(this.state.serverUrl).then(statusCodeAndMsg => {\n            this.setState({\n                alertMethod : statusCodeAndMsg[0],\n                alertMessage : statusCodeAndMsg[1],\n            })\n        })\n    }\n\n    // handleSendRequest is a func that will call  and update the panel status\n    handleSendRequest = (stringifyJSON, httpMethod) =>  {\n        // Check the str is JSON or not\n        if (!isJSON(stringifyJSON)) {\n            console.error('This is not a JSON file')\n            this.setState({\n                alertMethod : AlertMethod.Warning,\n                alertMessage: 'This is not a JSON file.',\n            })\n            return\n        }\n\n        // Prep Http request\n        const requestOptions = {\n            method: httpMethod,\n            headers: {'Content-Type':'application/json'},\n            body: stringifyJSON\n        };\n\n        // Call sendRequest\n        sendRequest(requestOptions, this.state.serverUrl).then(statusCodeAndMsg => {\n            this.setState({\n                alertMethod : statusCodeAndMsg[0],\n                alertMessage : statusCodeAndMsg[1],\n            })\n        })\n    }\n\n    handleCleanAlertStatus = () =>  {\n        this.setState({\n            alertMethod: AlertMethod.NoStatus,\n            alertMessage: '',\n        })\n    }\n\n    render() {\n        const {isLoaded, datasetListJSON} = this.state\n        if (!isLoaded) {\n            return (\n                <div className=\"Dataset\">\n                    <h1>Dataset Controller Panel</h1>\n                    <br/>\n                    <h2>Unable to Connect {this.state.serverUrl}...</h2>\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"Dataset\">\n                <h1>Dataset Controller Panel</h1>\n\n                <Datasets\n                    datasetListJSON={datasetListJSON}\n                    handleSendRequest={this.handleSendRequest}\n                />\n\n                <CreateDataset\n                    handleSendRequest={this.handleSendRequest}\n                />\n\n                <OperatorAlert alertMethod={this.state.alertMethod}\n                               alertMessage={this.state.alertMessage}\n                               handleCleanAlertStatus={this.handleCleanAlertStatus}\n                />\n            </div>\n        );\n    }\n}\n\nexport default DatasetController;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}