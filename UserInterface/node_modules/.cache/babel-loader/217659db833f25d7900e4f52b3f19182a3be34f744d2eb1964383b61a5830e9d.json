{"ast":null,"code":"import { Collection } from '../nodes/Collection.js';\nimport { isNode, isPair } from '../nodes/identity.js';\nimport { stringify } from './stringify.js';\nimport { lineComment, indentComment } from './stringifyComment.js';\nfunction stringifyCollection(collection, ctx, options) {\n  var _ctx$inFlow;\n  const flow = (_ctx$inFlow = ctx.inFlow) !== null && _ctx$inFlow !== void 0 ? _ctx$inFlow : collection.flow;\n  const stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;\n  return stringify(collection, ctx, options);\n}\nfunction stringifyBlockCollection(_ref, ctx, _ref2) {\n  let {\n    comment,\n    items\n  } = _ref;\n  let {\n    blockItemPrefix,\n    flowChars,\n    itemIndent,\n    onChompKeep,\n    onComment\n  } = _ref2;\n  const {\n    indent,\n    options: {\n      commentString\n    }\n  } = ctx;\n  const itemCtx = Object.assign({}, ctx, {\n    indent: itemIndent,\n    type: null\n  });\n  let chompKeep = false; // flag for the preceding node's status\n  const lines = [];\n  for (let i = 0; i < items.length; ++i) {\n    const item = items[i];\n    let comment = null;\n    if (isNode(item)) {\n      if (!chompKeep && item.spaceBefore) lines.push('');\n      addCommentBefore(ctx, lines, item.commentBefore, chompKeep);\n      if (item.comment) comment = item.comment;\n    } else if (isPair(item)) {\n      const ik = isNode(item.key) ? item.key : null;\n      if (ik) {\n        if (!chompKeep && ik.spaceBefore) lines.push('');\n        addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);\n      }\n    }\n    chompKeep = false;\n    let str = stringify(item, itemCtx, () => comment = null, () => chompKeep = true);\n    if (comment) str += lineComment(str, itemIndent, commentString(comment));\n    if (chompKeep && comment) chompKeep = false;\n    lines.push(blockItemPrefix + str);\n  }\n  let str;\n  if (lines.length === 0) {\n    str = flowChars.start + flowChars.end;\n  } else {\n    str = lines[0];\n    for (let i = 1; i < lines.length; ++i) {\n      const line = lines[i];\n      str += line ? \"\\n\".concat(indent).concat(line) : '\\n';\n    }\n  }\n  if (comment) {\n    str += '\\n' + indentComment(commentString(comment), indent);\n    if (onComment) onComment();\n  } else if (chompKeep && onChompKeep) onChompKeep();\n  return str;\n}\nfunction stringifyFlowCollection(_ref3, ctx, _ref4) {\n  let {\n    comment,\n    items\n  } = _ref3;\n  let {\n    flowChars,\n    itemIndent,\n    onComment\n  } = _ref4;\n  const {\n    indent,\n    indentStep,\n    flowCollectionPadding: fcPadding,\n    options: {\n      commentString\n    }\n  } = ctx;\n  itemIndent += indentStep;\n  const itemCtx = Object.assign({}, ctx, {\n    indent: itemIndent,\n    inFlow: true,\n    type: null\n  });\n  let reqNewline = false;\n  let linesAtValue = 0;\n  const lines = [];\n  for (let i = 0; i < items.length; ++i) {\n    const item = items[i];\n    let comment = null;\n    if (isNode(item)) {\n      if (item.spaceBefore) lines.push('');\n      addCommentBefore(ctx, lines, item.commentBefore, false);\n      if (item.comment) comment = item.comment;\n    } else if (isPair(item)) {\n      const ik = isNode(item.key) ? item.key : null;\n      if (ik) {\n        if (ik.spaceBefore) lines.push('');\n        addCommentBefore(ctx, lines, ik.commentBefore, false);\n        if (ik.comment) reqNewline = true;\n      }\n      const iv = isNode(item.value) ? item.value : null;\n      if (iv) {\n        if (iv.comment) comment = iv.comment;\n        if (iv.commentBefore) reqNewline = true;\n      } else if (item.value == null && ik !== null && ik !== void 0 && ik.comment) {\n        comment = ik.comment;\n      }\n    }\n    if (comment) reqNewline = true;\n    let str = stringify(item, itemCtx, () => comment = null);\n    if (i < items.length - 1) str += ',';\n    if (comment) str += lineComment(str, itemIndent, commentString(comment));\n    if (!reqNewline && (lines.length > linesAtValue || str.includes('\\n'))) reqNewline = true;\n    lines.push(str);\n    linesAtValue = lines.length;\n  }\n  let str;\n  const {\n    start,\n    end\n  } = flowChars;\n  if (lines.length === 0) {\n    str = start + end;\n  } else {\n    if (!reqNewline) {\n      const len = lines.reduce((sum, line) => sum + line.length + 2, 2);\n      reqNewline = len > Collection.maxFlowStringSingleLineLength;\n    }\n    if (reqNewline) {\n      str = start;\n      for (const line of lines) str += line ? \"\\n\".concat(indentStep).concat(indent).concat(line) : '\\n';\n      str += \"\\n\".concat(indent).concat(end);\n    } else {\n      str = \"\".concat(start).concat(fcPadding).concat(lines.join(' ')).concat(fcPadding).concat(end);\n    }\n  }\n  if (comment) {\n    str += lineComment(str, indent, commentString(comment));\n    if (onComment) onComment();\n  }\n  return str;\n}\nfunction addCommentBefore(_ref5, lines, comment, chompKeep) {\n  let {\n    indent,\n    options: {\n      commentString\n    }\n  } = _ref5;\n  if (comment && chompKeep) comment = comment.replace(/^\\n+/, '');\n  if (comment) {\n    const ic = indentComment(commentString(comment), indent);\n    lines.push(ic.trimStart()); // Avoid double indent on first line\n  }\n}\nexport { stringifyCollection };","map":{"version":3,"names":["Collection","isNode","isPair","stringify","lineComment","indentComment","stringifyCollection","collection","ctx","options","_ctx$inFlow","flow","inFlow","stringifyFlowCollection","stringifyBlockCollection","_ref","_ref2","comment","items","blockItemPrefix","flowChars","itemIndent","onChompKeep","onComment","indent","commentString","itemCtx","Object","assign","type","chompKeep","lines","i","length","item","spaceBefore","push","addCommentBefore","commentBefore","ik","key","str","start","end","line","concat","_ref3","_ref4","indentStep","flowCollectionPadding","fcPadding","reqNewline","linesAtValue","iv","value","includes","len","reduce","sum","maxFlowStringSingleLineLength","join","_ref5","replace","ic","trimStart"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/node_modules/yaml/browser/dist/stringify/stringifyCollection.js"],"sourcesContent":["import { Collection } from '../nodes/Collection.js';\nimport { isNode, isPair } from '../nodes/identity.js';\nimport { stringify } from './stringify.js';\nimport { lineComment, indentComment } from './stringifyComment.js';\n\nfunction stringifyCollection(collection, ctx, options) {\n    const flow = ctx.inFlow ?? collection.flow;\n    const stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;\n    return stringify(collection, ctx, options);\n}\nfunction stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {\n    const { indent, options: { commentString } } = ctx;\n    const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });\n    let chompKeep = false; // flag for the preceding node's status\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (isNode(item)) {\n            if (!chompKeep && item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, chompKeep);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (isPair(item)) {\n            const ik = isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (!chompKeep && ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);\n            }\n        }\n        chompKeep = false;\n        let str = stringify(item, itemCtx, () => (comment = null), () => (chompKeep = true));\n        if (comment)\n            str += lineComment(str, itemIndent, commentString(comment));\n        if (chompKeep && comment)\n            chompKeep = false;\n        lines.push(blockItemPrefix + str);\n    }\n    let str;\n    if (lines.length === 0) {\n        str = flowChars.start + flowChars.end;\n    }\n    else {\n        str = lines[0];\n        for (let i = 1; i < lines.length; ++i) {\n            const line = lines[i];\n            str += line ? `\\n${indent}${line}` : '\\n';\n        }\n    }\n    if (comment) {\n        str += '\\n' + indentComment(commentString(comment), indent);\n        if (onComment)\n            onComment();\n    }\n    else if (chompKeep && onChompKeep)\n        onChompKeep();\n    return str;\n}\nfunction stringifyFlowCollection({ comment, items }, ctx, { flowChars, itemIndent, onComment }) {\n    const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;\n    itemIndent += indentStep;\n    const itemCtx = Object.assign({}, ctx, {\n        indent: itemIndent,\n        inFlow: true,\n        type: null\n    });\n    let reqNewline = false;\n    let linesAtValue = 0;\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (isNode(item)) {\n            if (item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, false);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (isPair(item)) {\n            const ik = isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, false);\n                if (ik.comment)\n                    reqNewline = true;\n            }\n            const iv = isNode(item.value) ? item.value : null;\n            if (iv) {\n                if (iv.comment)\n                    comment = iv.comment;\n                if (iv.commentBefore)\n                    reqNewline = true;\n            }\n            else if (item.value == null && ik?.comment) {\n                comment = ik.comment;\n            }\n        }\n        if (comment)\n            reqNewline = true;\n        let str = stringify(item, itemCtx, () => (comment = null));\n        if (i < items.length - 1)\n            str += ',';\n        if (comment)\n            str += lineComment(str, itemIndent, commentString(comment));\n        if (!reqNewline && (lines.length > linesAtValue || str.includes('\\n')))\n            reqNewline = true;\n        lines.push(str);\n        linesAtValue = lines.length;\n    }\n    let str;\n    const { start, end } = flowChars;\n    if (lines.length === 0) {\n        str = start + end;\n    }\n    else {\n        if (!reqNewline) {\n            const len = lines.reduce((sum, line) => sum + line.length + 2, 2);\n            reqNewline = len > Collection.maxFlowStringSingleLineLength;\n        }\n        if (reqNewline) {\n            str = start;\n            for (const line of lines)\n                str += line ? `\\n${indentStep}${indent}${line}` : '\\n';\n            str += `\\n${indent}${end}`;\n        }\n        else {\n            str = `${start}${fcPadding}${lines.join(' ')}${fcPadding}${end}`;\n        }\n    }\n    if (comment) {\n        str += lineComment(str, indent, commentString(comment));\n        if (onComment)\n            onComment();\n    }\n    return str;\n}\nfunction addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {\n    if (comment && chompKeep)\n        comment = comment.replace(/^\\n+/, '');\n    if (comment) {\n        const ic = indentComment(commentString(comment), indent);\n        lines.push(ic.trimStart()); // Avoid double indent on first line\n    }\n}\n\nexport { stringifyCollection };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}