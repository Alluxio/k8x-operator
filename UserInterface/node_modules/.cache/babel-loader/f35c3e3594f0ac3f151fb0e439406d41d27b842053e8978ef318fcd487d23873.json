{"ast":null,"code":"var _jsxFileName = \"/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/containers/alluxio-controller.jsx\";\nimport React, { Component } from 'react';\nimport OperatorAlert from \"../components/alert/Alert\";\nimport { AlertMethod } from \"../components/alert/Alert\";\nimport { sendRequest, YAMLtoJSON, getRequest, isJSONString } from \"../util/util\";\nimport AlluxioClusters from \"../components/alluxio_cluster/AlluxioClusters\";\nimport CreateObject from \"../util/CreateObject\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst serverUrl = '/api/alluxio_cluster';\nclass AlluxioController extends Component {\n  constructor(props) {\n    super(props);\n    this.handleGetRequest = () => {\n      // Call getRequest\n      getRequest(serverUrl).then(statusCodeAndMsg => {\n        if (statusCodeAndMsg[0] === AlertMethod.Success) {\n          const numberOfAlluxio = statusCodeAndMsg[2]['alluxio-clusters'].length;\n          const newAlluxioList = [];\n          for (let i = 0; i < numberOfAlluxio; i++) {\n            newAlluxioList.push(statusCodeAndMsg[2]['alluxio-clusters'][i]);\n            //console.log(statusCodeAndMsg[2]['alluxio-clusters'][i].status)\n          }\n          this.setState({\n            alluxioList: newAlluxioList\n          });\n        } else {\n          this.setState({\n            alertMethod: statusCodeAndMsg[0],\n            alertMessage: statusCodeAndMsg[1]\n          });\n        }\n      });\n    };\n    // handleSendRequest is a func that will call sendRequest() and update the panel status\n    this.handleSendRequest = (stringifyYAML, httpMethod) => {\n      try {\n        const stringifyJSON = YAMLtoJSON(stringifyYAML);\n      } catch (error) {\n        this.setState({\n          alertMethod: AlertMethod.Warning,\n          alertMessage: 'This is not a Valid Input: ' + error\n        });\n        return;\n      }\n\n      // Prep Http request\n      const requestOptions = {\n        method: httpMethod,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: stringifyJSON\n      };\n\n      // Call sendRequest\n      sendRequest(requestOptions, serverUrl).then(statusCodeAndMsg => {\n        this.setState({\n          alertMethod: statusCodeAndMsg[0],\n          alertMessage: statusCodeAndMsg[1]\n        });\n      });\n    };\n    this.handleCleanAlertStatus = () => {\n      this.setState({\n        alertMethod: AlertMethod.NoStatus,\n        alertMessage: ''\n      });\n    };\n    this.state = {\n      alluxioList: [],\n      alertMethod: AlertMethod.NoStatus,\n      alertMessage: ''\n    };\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.handleGetRequest();\n    }, 2000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Alluxio\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Alluxio Controller Panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CreateObject, {\n        objectKind: 'Alluxio Cluster',\n        handleSendRequest: this.handleSendRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AlluxioClusters, {\n        alluxioList: this.state.alluxioList,\n        handleSendRequest: this.handleSendRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(OperatorAlert, {\n        alertMethod: this.state.alertMethod,\n        alertMessage: this.state.alertMessage,\n        handleCleanAlertStatus: this.handleCleanAlertStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default AlluxioController;","map":{"version":3,"names":["React","Component","OperatorAlert","AlertMethod","sendRequest","YAMLtoJSON","getRequest","isJSONString","AlluxioClusters","CreateObject","jsxDEV","_jsxDEV","serverUrl","AlluxioController","constructor","props","handleGetRequest","then","statusCodeAndMsg","Success","numberOfAlluxio","length","newAlluxioList","i","push","setState","alluxioList","alertMethod","alertMessage","handleSendRequest","stringifyYAML","httpMethod","stringifyJSON","error","Warning","requestOptions","method","headers","body","handleCleanAlertStatus","NoStatus","state","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","objectKind"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/containers/alluxio-controller.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport OperatorAlert from \"../components/alert/Alert\";\nimport {AlertMethod} from \"../components/alert/Alert\";\nimport {sendRequest, YAMLtoJSON, getRequest, isJSONString} from \"../util/util\";\nimport AlluxioClusters from \"../components/alluxio_cluster/AlluxioClusters\";\nimport CreateObject from \"../util/CreateObject\";\n\nconst serverUrl = '/api/alluxio_cluster'\n\nclass AlluxioController extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            alluxioList: [],\n\n            alertMethod: AlertMethod.NoStatus,\n            alertMessage: '',\n        };\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.handleGetRequest()\n        }, 2000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    handleGetRequest = () =>  {\n        // Call getRequest\n        getRequest(serverUrl).then(statusCodeAndMsg => {\n            if (statusCodeAndMsg[0] === AlertMethod.Success) {\n                const numberOfAlluxio = statusCodeAndMsg[2]['alluxio-clusters'].length\n                const newAlluxioList = [];\n                for (let i = 0; i < numberOfAlluxio; i++) {\n                    newAlluxioList.push(statusCodeAndMsg[2]['alluxio-clusters'][i])\n                    //console.log(statusCodeAndMsg[2]['alluxio-clusters'][i].status)\n                }\n\n                this.setState({alluxioList: newAlluxioList})\n            } else {\n                this.setState({\n                    alertMethod : statusCodeAndMsg[0],\n                    alertMessage : statusCodeAndMsg[1],\n                })\n            }\n        })\n    }\n\n    // handleSendRequest is a func that will call sendRequest() and update the panel status\n    handleSendRequest = (stringifyYAML, httpMethod) =>  {\n        try {\n            const stringifyJSON = YAMLtoJSON(stringifyYAML)\n        } catch (error) {\n            this.setState({\n                alertMethod : AlertMethod.Warning,\n                alertMessage: 'This is not a Valid Input: ' + error,\n            })\n            return\n        }\n\n        // Prep Http request\n        const requestOptions = {\n            method: httpMethod,\n            headers: {'Content-Type':'application/json'},\n            body: stringifyJSON\n        };\n\n        // Call sendRequest\n        sendRequest(requestOptions, serverUrl).then(statusCodeAndMsg => {\n            this.setState({\n                alertMethod : statusCodeAndMsg[0],\n                alertMessage : statusCodeAndMsg[1],\n            })\n        })\n    }\n\n    handleCleanAlertStatus = () =>  {\n        this.setState({\n            alertMethod: AlertMethod.NoStatus,\n            alertMessage: '',\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Alluxio\">\n                <h1>Alluxio Controller Panel</h1>\n                <br/>\n                <CreateObject\n                    objectKind={'Alluxio Cluster'}\n                    handleSendRequest={this.handleSendRequest}\n                />\n                <br/>\n                <AlluxioClusters\n                    alluxioList={this.state.alluxioList}\n                    handleSendRequest={this.handleSendRequest}\n                />\n\n                <OperatorAlert alertMethod={this.state.alertMethod}\n                               alertMessage={this.state.alertMessage}\n                               handleCleanAlertStatus={this.handleCleanAlertStatus}\n                />\n            </div>\n        );\n    }\n}\n\n\nexport default AlluxioController;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}