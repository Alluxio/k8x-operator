{"ast":null,"code":"import { AlertMethod } from \"../components/alert/Alert\";\nimport yaml from 'js-yaml';\nexport const DataType = {\n  JSONString: 1,\n  JSONObject: 2,\n  YAMLString: 3,\n  YAMLObject: 4\n};\n\n// modalStyle contains styling for all modals.\nexport const modalStyle = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: '75%',\n  height: '80%',\n  bgcolor: 'background.paper',\n  border: '1px solid #000',\n  'border-radius': ' 10px',\n  p: 4\n};\nexport const FetchHeaders = {\n  'Content-Type': 'application/json'\n};\n\n/**\n * Use HTTP method in requestOptions to communicate with api server.\n *\n * @param requestOptions contains http method. headers and body.\n * @param {string} serverUrl is a relative or points to your development server.\n * @function sendRequest\n * @returns [AlertMethod, AlertMessage]\n */\nexport async function sendRequest(requestOptions, serverUrl) {\n  try {\n    const response = await fetch(serverUrl, requestOptions);\n    if (!response.ok) {\n      try {\n        const errorBody = await response.json();\n        const errorMessage = `${errorBody.title}: ${errorBody.details}`;\n        return [AlertMethod.Error, errorMessage];\n      } catch (jsonError) {\n        return [AlertMethod.Error, 'An error occurred, but the error message from API-Server could not be parsed.'];\n      }\n    }\n    return [AlertMethod.Success, 'Success!'];\n  } catch (error) {\n    return [AlertMethod.Error, error.toString()];\n  }\n}\n\n/**\n * Use GET method to get data\n *\n * @param {string} serverUrl is a relative or points to your development server.\n * @function getRequest\n * @returns [AlertMethod, AlertMessage, Result in JSON Object(Optional)]\n */\nexport async function getRequest(serverUrl) {\n  try {\n    const response = await fetch(serverUrl);\n    if (!response.ok) {\n      try {\n        const errorBody = await response.json();\n        const errorMessage = `${errorBody.title}: ${errorBody.details}`;\n        return [AlertMethod.Error, errorMessage];\n      } catch (jsonError) {\n        return [AlertMethod.Error, 'An error occurred, but the error message from API-Server could not be parsed.'];\n      }\n    }\n    const result = await response.json();\n    return [AlertMethod.Success, 'Success!', result];\n  } catch (error) {\n    console.log(error);\n    return [AlertMethod.Error, error.toString()];\n  }\n}\n\n/**\n * Convert YAML String to JSON String\n *\n * @param {string} yamlStr is a YAML string\n * @function YAMLtoJSON\n * @returns {string} jsonStr\n */\nexport function YAMLtoJSON(yamlStr) {\n  const obj = yaml.load(yamlStr);\n  return JSON.stringify(obj);\n}\n\n/**\n * Convert JSON String to YAML String\n *\n * @param {JSON} jsonObj is a YAML string\n * @function JSONtoStringifyYAML\n * @returns {string} yamlStr\n */\n_c = YAMLtoJSON;\nexport function JSONtoStringifyYAML(jsonObj) {\n  return yaml.dump(jsonObj);\n}\n\n/**\n * Convert Input to StringifyJSON\n *\n * @param dataType is defined in DataType\n * @param inputData can be type that specified in dataType\n * @function convertToStringifyJSON\n * @returns {string} jsonStr\n */\n_c2 = JSONtoStringifyYAML;\nexport function convertToStringifyJSON(dataType, inputData) {\n  if (dataType === DataType.YAMLString) {\n    const parsedYaml = yaml.load(inputData);\n    return JSON.stringify(parsedYaml, null, 2);\n  }\n  if (dataType === DataType.JSONString) {\n    const parsedJSON = JSON.parse(inputData);\n    return JSON.stringify(parsedJSON);\n  }\n  if (dataType === DataType.YAMLObject) {\n    return JSON.stringify(inputData);\n  }\n  if (dataType === DataType.JSONObject) {\n    return JSON.stringify(inputData);\n  }\n  return JSON.stringify(JSON);\n}\n\n/**\n * Generate HTTP Request Body for Fetch()\n *\n * @param httpMethod\n * @param dataType\n * @param inputData\n * @function generateHttpRequestOptions\n * @returns  requestOptions\n */\nexport function generateHttpRequestOptions(httpMethod, dataType, inputData) {\n  return {\n    method: httpMethod,\n    headers: FetchHeaders,\n    body: convertToStringifyJSON(dataType, inputData)\n  };\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"YAMLtoJSON\");\n$RefreshReg$(_c2, \"JSONtoStringifyYAML\");","map":{"version":3,"names":["AlertMethod","yaml","DataType","JSONString","JSONObject","YAMLString","YAMLObject","modalStyle","position","top","left","transform","width","height","bgcolor","border","p","FetchHeaders","sendRequest","requestOptions","serverUrl","response","fetch","ok","errorBody","json","errorMessage","title","details","Error","jsonError","Success","error","toString","getRequest","result","console","log","YAMLtoJSON","yamlStr","obj","load","JSON","stringify","_c","JSONtoStringifyYAML","jsonObj","dump","_c2","convertToStringifyJSON","dataType","inputData","parsedYaml","parsedJSON","parse","generateHttpRequestOptions","httpMethod","method","headers","body","$RefreshReg$"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/util/util.jsx"],"sourcesContent":["import {AlertMethod} from \"../components/alert/Alert\";\nimport yaml from 'js-yaml'\n\nexport const DataType =  {\n    JSONString: 1,\n    JSONObject: 2,\n    YAMLString: 3,\n    YAMLObject: 4,\n}\n\n// modalStyle contains styling for all modals.\nexport const modalStyle = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '75%',\n    height: '80%',\n    bgcolor: 'background.paper',\n    border: '1px solid #000',\n    'border-radius': ' 10px',\n    p: 4,\n};\n\n\nexport const FetchHeaders = {'Content-Type':'application/json'}\n\n/**\n * Use HTTP method in requestOptions to communicate with api server.\n *\n * @param requestOptions contains http method. headers and body.\n * @param {string} serverUrl is a relative or points to your development server.\n * @function sendRequest\n * @returns [AlertMethod, AlertMessage]\n */\nexport async function sendRequest(requestOptions, serverUrl) {\n    try {\n        const response = await fetch(serverUrl, requestOptions);\n        if (!response.ok) {\n            try {\n                const errorBody = await response.json();\n                const errorMessage = `${errorBody.title}: ${errorBody.details}`;\n                return [AlertMethod.Error, errorMessage];\n            } catch (jsonError) {\n                return [AlertMethod.Error, 'An error occurred, but the error message from API-Server could not be parsed.'];\n            }\n        }\n        return [AlertMethod.Success, 'Success!'];\n    } catch (error) {\n        return [AlertMethod.Error, error.toString()];\n    }\n}\n\n\n/**\n * Use GET method to get data\n *\n * @param {string} serverUrl is a relative or points to your development server.\n * @function getRequest\n * @returns [AlertMethod, AlertMessage, Result in JSON Object(Optional)]\n */\nexport async function getRequest(serverUrl){\n    try {\n        const response = await fetch(serverUrl);\n\n        if (!response.ok) {\n            try {\n                const errorBody = await response.json();\n                const errorMessage = `${errorBody.title}: ${errorBody.details}`;\n                return [AlertMethod.Error, errorMessage];\n            } catch (jsonError) {\n                return [AlertMethod.Error, 'An error occurred, but the error message from API-Server could not be parsed.'];\n            }\n        }\n\n        const result = await response.json();\n        return [AlertMethod.Success, 'Success!', result];\n    } catch (error) {\n        console.log(error);\n        return [AlertMethod.Error, error.toString()];\n    }\n}\n\n/**\n * Convert YAML String to JSON String\n *\n * @param {string} yamlStr is a YAML string\n * @function YAMLtoJSON\n * @returns {string} jsonStr\n */\nexport function YAMLtoJSON(yamlStr) {\n    const obj = yaml.load(yamlStr);\n    return JSON.stringify(obj);\n}\n\n/**\n * Convert JSON String to YAML String\n *\n * @param {JSON} jsonObj is a YAML string\n * @function JSONtoStringifyYAML\n * @returns {string} yamlStr\n */\nexport function JSONtoStringifyYAML(jsonObj) {\n    return yaml.dump(jsonObj)\n}\n\n\n/**\n * Convert Input to StringifyJSON\n *\n * @param dataType is defined in DataType\n * @param inputData can be type that specified in dataType\n * @function convertToStringifyJSON\n * @returns {string} jsonStr\n */\nexport function convertToStringifyJSON(dataType, inputData) {\n    if (dataType === DataType.YAMLString) {\n        const parsedYaml = yaml.load(inputData);\n        return JSON.stringify(parsedYaml, null, 2);\n    }\n\n    if (dataType === DataType.JSONString) {\n        const parsedJSON = JSON.parse(inputData);\n        return JSON.stringify(parsedJSON);\n    }\n\n    if (dataType === DataType.YAMLObject) {\n        return JSON.stringify(inputData)\n    }\n    if (dataType === DataType.JSONObject) {\n        return JSON.stringify(inputData)\n    }\n\n    return JSON.stringify(JSON)\n}\n\n\n/**\n * Generate HTTP Request Body for Fetch()\n *\n * @param httpMethod\n * @param dataType\n * @param inputData\n * @function generateHttpRequestOptions\n * @returns  requestOptions\n */\nexport function generateHttpRequestOptions(httpMethod, dataType, inputData) {\n    return {\n        method: httpMethod,\n        headers: FetchHeaders,\n        body: convertToStringifyJSON(dataType, inputData),\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}