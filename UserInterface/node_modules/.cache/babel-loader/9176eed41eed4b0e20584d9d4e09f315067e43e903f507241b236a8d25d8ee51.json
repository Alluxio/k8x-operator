{"ast":null,"code":"var _jsxFileName = \"/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/pages/dataset-controller.jsx\";\nimport React, { Component } from 'react';\nimport Alert from '@mui/material/Alert';\nimport Dataset from \"../components/dataset/Dataset\";\nimport CreateDataset from \"../components/dataset/CreateDataset\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PanelStatus = {\n  NoStatus: 0,\n  Success: 1,\n  WrongJSON: 2,\n  UnableToCreate: 3\n};\nexport function isJSON(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\nconst PanelStatusElement = [/*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Alert, {\n  variant: \"outlined\",\n  severity: \"success\",\n  children: \"Success!\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 24,\n  columnNumber: 5\n}, this), /*#__PURE__*/_jsxDEV(Alert, {\n  variant: \"outlined\",\n  severity: \"warning\",\n  children: \"Unable to Create JSON Object, check input!\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 27,\n  columnNumber: 5\n}, this), /*#__PURE__*/_jsxDEV(Alert, {\n  variant: \"outlined\",\n  severity: \"error\",\n  children: \"Unable to Create!\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 30,\n  columnNumber: 5\n}, this)];\nclass DatasetController extends Component {\n  constructor(props) {\n    super(props);\n    // handleSendRequest is a func that will call  and update the panel status\n    this.handleSendRequest = (stringifyJSON, httpMethod) => {\n      // Check the str is JSON or not\n      if (!isJSON(stringifyJSON)) {\n        this.setState({\n          datasetUpdateStatus: PanelStatus.WrongJSON\n        });\n        return;\n      }\n\n      // Prep Http request\n      const requestOptions = {\n        method: httpMethod,\n        mode: 'cors',\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': 'http://localhost:3000'\n        },\n        body: stringifyJSON\n      };\n\n      // Call sendRequest\n      this.sendRequest(requestOptions).then(statusCode => {\n        console.log(statusCode);\n        this.setState({\n          panelStatus: statusCode\n        });\n      });\n    };\n    this.state = {\n      serverUrl: 'http://localhost:5221/dataset',\n      isLoaded: false,\n      hasDataset: false,\n      datasetListJSON: JSON,\n      panelStatus: PanelStatus.NoStatus,\n      error: ''\n    };\n    this.fetchData = this.fetchData.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n  }\n  componentDidMount() {\n    this.fetchData();\n  }\n  // sendRequest is an async func that communicate with api server.\n  async sendRequest(requestOptions) {\n    // POST request using fetch with async/await\n    try {\n      const response = await fetch(this.state.serverUrl, requestOptions);\n      if (!response.ok) {\n        return PanelStatus.UnableToCreate;\n      }\n      const data = await response.json();\n      console.log(JSON.stringify(data));\n      return PanelStatus.Success;\n    } catch (error) {\n      console.log(error);\n      return PanelStatus.UnableToCreate;\n    }\n  }\n  async fetchData() {\n    console.log(\"Fetch data\");\n    try {\n      const response = await fetch(this.state.serverUrl);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const result = await response.json();\n      if (result.datasets.length === 0) {\n        this.setState({\n          isLoaded: true,\n          hasDataset: false\n        });\n      } else {\n        this.setState({\n          isLoaded: true,\n          hasDataset: true,\n          datasetListJSON: result.datasets\n        });\n      }\n    } catch (error) {\n      console.error(error);\n      this.setState({\n        error: error\n      });\n    }\n  }\n  render() {\n    const {\n      isLoaded,\n      datasetListJSON\n    } = this.state;\n    if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Dataset\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Dataset Controller Panel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Unable to Connect \", this.state.serverUrl, \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this);\n    }\n    const numberOfDataset = datasetListJSON.length;\n    const datasetElements = [];\n    for (let i = 0; i < numberOfDataset; i++) {\n      datasetElements.push( /*#__PURE__*/_jsxDEV(Dataset, {\n        datasetSequence: i,\n        datasetOriginalJSON: datasetListJSON[i]\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this));\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Dataset\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Dataset Controller Panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"There are \", numberOfDataset, \" Datasets\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), datasetElements, /*#__PURE__*/_jsxDEV(CreateDataset, {\n        handleSendRequest: this.handleSendRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Indicator\",\n        children: PanelStatusElement[this.state.panelStatus]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default DatasetController;","map":{"version":3,"names":["React","Component","Alert","Dataset","CreateDataset","Fragment","_Fragment","jsxDEV","_jsxDEV","PanelStatus","NoStatus","Success","WrongJSON","UnableToCreate","isJSON","str","JSON","parse","e","PanelStatusElement","variant","severity","children","fileName","_jsxFileName","lineNumber","columnNumber","DatasetController","constructor","props","handleSendRequest","stringifyJSON","httpMethod","setState","datasetUpdateStatus","requestOptions","method","mode","headers","body","sendRequest","then","statusCode","console","log","panelStatus","state","serverUrl","isLoaded","hasDataset","datasetListJSON","error","fetchData","bind","componentDidMount","response","fetch","ok","data","json","stringify","Error","result","datasets","length","render","className","numberOfDataset","datasetElements","i","push","datasetSequence","datasetOriginalJSON"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/pages/dataset-controller.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport Alert from '@mui/material/Alert';\nimport Dataset from \"../components/dataset/Dataset\";\nimport CreateDataset from \"../components/dataset/CreateDataset\";\n\nexport const PanelStatus =  {\n    NoStatus : 0,\n    Success : 1,\n    WrongJSON : 2,\n    UnableToCreate : 3,\n}\n\nexport function isJSON(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\nconst PanelStatusElement = [\n    <></>,\n    <Alert variant=\"outlined\" severity=\"success\">\n        Success!\n    </Alert>,\n    <Alert variant=\"outlined\" severity=\"warning\">\n        Unable to Create JSON Object, check input!\n    </Alert>,\n    <Alert variant=\"outlined\" severity=\"error\">\n        Unable to Create!\n    </Alert>\n]\n\nclass DatasetController extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            serverUrl: 'http://localhost:5221/dataset',\n            isLoaded: false,\n\n            hasDataset: false,\n            datasetListJSON: JSON,\n\n            panelStatus: PanelStatus.NoStatus,\n            error: '',\n        };\n\n        this.fetchData = this.fetchData.bind(this)\n        this.sendRequest = this.sendRequest.bind(this)\n    }\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n    // handleSendRequest is a func that will call  and update the panel status\n    handleSendRequest = (stringifyJSON, httpMethod) =>  {\n        // Check the str is JSON or not\n        if (!isJSON(stringifyJSON)) {\n            this.setState(\n                {datasetUpdateStatus: PanelStatus.WrongJSON}\n            )\n            return\n        }\n\n        // Prep Http request\n        const requestOptions = {\n            method: httpMethod,\n            mode: 'cors',\n            headers: {'Content-Type':'application/json',\n                'Access-Control-Allow-Origin':'http://localhost:3000'\n            },\n            body: stringifyJSON\n        };\n\n        // Call sendRequest\n        this.sendRequest(requestOptions).then(statusCode => {\n            console.log(statusCode)\n            this.setState({\n                panelStatus : statusCode,\n            })\n        })\n    }\n\n    // sendRequest is an async func that communicate with api server.\n    async sendRequest(requestOptions) {\n        // POST request using fetch with async/await\n        try {\n            const response = await fetch(this.state.serverUrl, requestOptions);\n            if (!response.ok) {\n                return PanelStatus.UnableToCreate\n            }\n\n            const data = await response.json();\n            console.log(JSON.stringify(data))\n            return PanelStatus.Success\n        } catch (error) {\n            console.log(error)\n            return PanelStatus.UnableToCreate\n        }\n    }\n\n    async fetchData() {\n        console.log(\"Fetch data\")\n        try {\n            const response = await fetch(this.state.serverUrl)\n            if (!response.ok) { throw new Error('Network response was not ok');}\n\n            const result = await response.json();\n            if (result.datasets.length === 0) {\n                this.setState({\n                    isLoaded: true,\n                    hasDataset : false\n                });\n            } else {\n                this.setState({\n                    isLoaded: true,\n                    hasDataset : true,\n                    datasetListJSON : result.datasets,\n                });\n            }\n        } catch (error) {\n            console.error(error);\n            this.setState({\n                error: error\n            });\n        }\n    }\n\n    render() {\n        const {isLoaded, datasetListJSON} = this.state\n\n        if (!isLoaded) {\n            return (\n                <div className=\"Dataset\">\n                    <h1>Dataset Controller Panel</h1>\n                    <br/>\n                    <h2>Unable to Connect {this.state.serverUrl}...</h2>\n                </div>\n            );\n        }\n\n        const numberOfDataset = datasetListJSON.length\n        const datasetElements = [];\n        for (let i = 0; i < numberOfDataset; i++) {\n            datasetElements.push(\n                <Dataset key={i} datasetSequence={i} datasetOriginalJSON={datasetListJSON[i]}/>\n            );\n        }\n\n        return (\n            <div className=\"Dataset\">\n                <h1>Dataset Controller Panel</h1>\n\n                <h2>There are {numberOfDataset} Datasets</h2>\n\n                {datasetElements}\n\n                <CreateDataset\n                    handleSendRequest={this.handleSendRequest}\n                />\n\n                <div className=\"Indicator\">\n                    {PanelStatusElement[this.state.panelStatus]}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DatasetController;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}