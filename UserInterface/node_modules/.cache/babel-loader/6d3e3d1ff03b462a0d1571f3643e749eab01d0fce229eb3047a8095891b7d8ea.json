{"ast":null,"code":"import { Scalar } from '../../nodes/Scalar.js';\nimport { map } from '../common/map.js';\nimport { seq } from '../common/seq.js';\nfunction intIdentify(value) {\n  return typeof value === 'bigint' || Number.isInteger(value);\n}\nconst stringifyJSON = _ref => {\n  let {\n    value\n  } = _ref;\n  return JSON.stringify(value);\n};\nconst jsonScalars = [{\n  identify: value => typeof value === 'string',\n  default: true,\n  tag: 'tag:yaml.org,2002:str',\n  resolve: str => str,\n  stringify: stringifyJSON\n}, {\n  identify: value => value == null,\n  createNode: () => new Scalar(null),\n  default: true,\n  tag: 'tag:yaml.org,2002:null',\n  test: /^null$/,\n  resolve: () => null,\n  stringify: stringifyJSON\n}, {\n  identify: value => typeof value === 'boolean',\n  default: true,\n  tag: 'tag:yaml.org,2002:bool',\n  test: /^true|false$/,\n  resolve: str => str === 'true',\n  stringify: stringifyJSON\n}, {\n  identify: intIdentify,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  test: /^-?(?:0|[1-9][0-9]*)$/,\n  resolve: (str, _onError, _ref2) => {\n    let {\n      intAsBigInt\n    } = _ref2;\n    return intAsBigInt ? BigInt(str) : parseInt(str, 10);\n  },\n  stringify: _ref3 => {\n    let {\n      value\n    } = _ref3;\n    return intIdentify(value) ? value.toString() : JSON.stringify(value);\n  }\n}, {\n  identify: value => typeof value === 'number',\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\n  resolve: str => parseFloat(str),\n  stringify: stringifyJSON\n}];\nconst jsonError = {\n  default: true,\n  tag: '',\n  test: /^/,\n  resolve(str, onError) {\n    onError(\"Unresolved plain scalar \".concat(JSON.stringify(str)));\n    return str;\n  }\n};\nconst schema = [map, seq].concat(jsonScalars, jsonError);\nexport { schema };","map":{"version":3,"names":["Scalar","map","seq","intIdentify","value","Number","isInteger","stringifyJSON","_ref","JSON","stringify","jsonScalars","identify","default","tag","resolve","str","createNode","test","_onError","_ref2","intAsBigInt","BigInt","parseInt","_ref3","toString","parseFloat","jsonError","onError","concat","schema"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/node_modules/yaml/browser/dist/schema/json/schema.js"],"sourcesContent":["import { Scalar } from '../../nodes/Scalar.js';\nimport { map } from '../common/map.js';\nimport { seq } from '../common/seq.js';\n\nfunction intIdentify(value) {\n    return typeof value === 'bigint' || Number.isInteger(value);\n}\nconst stringifyJSON = ({ value }) => JSON.stringify(value);\nconst jsonScalars = [\n    {\n        identify: value => typeof value === 'string',\n        default: true,\n        tag: 'tag:yaml.org,2002:str',\n        resolve: str => str,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => value == null,\n        createNode: () => new Scalar(null),\n        default: true,\n        tag: 'tag:yaml.org,2002:null',\n        test: /^null$/,\n        resolve: () => null,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => typeof value === 'boolean',\n        default: true,\n        tag: 'tag:yaml.org,2002:bool',\n        test: /^true|false$/,\n        resolve: str => str === 'true',\n        stringify: stringifyJSON\n    },\n    {\n        identify: intIdentify,\n        default: true,\n        tag: 'tag:yaml.org,2002:int',\n        test: /^-?(?:0|[1-9][0-9]*)$/,\n        resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),\n        stringify: ({ value }) => intIdentify(value) ? value.toString() : JSON.stringify(value)\n    },\n    {\n        identify: value => typeof value === 'number',\n        default: true,\n        tag: 'tag:yaml.org,2002:float',\n        test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\n        resolve: str => parseFloat(str),\n        stringify: stringifyJSON\n    }\n];\nconst jsonError = {\n    default: true,\n    tag: '',\n    test: /^/,\n    resolve(str, onError) {\n        onError(`Unresolved plain scalar ${JSON.stringify(str)}`);\n        return str;\n    }\n};\nconst schema = [map, seq].concat(jsonScalars, jsonError);\n\nexport { schema };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,GAAG,QAAQ,kBAAkB;AAEtC,SAASC,WAAWA,CAACC,KAAK,EAAE;EACxB,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIC,MAAM,CAACC,SAAS,CAACF,KAAK,CAAC;AAC/D;AACA,MAAMG,aAAa,GAAGC,IAAA;EAAA,IAAC;IAAEJ;EAAM,CAAC,GAAAI,IAAA;EAAA,OAAKC,IAAI,CAACC,SAAS,CAACN,KAAK,CAAC;AAAA;AAC1D,MAAMO,WAAW,GAAG,CAChB;EACIC,QAAQ,EAAER,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ;EAC5CS,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,uBAAuB;EAC5BC,OAAO,EAAEC,GAAG,IAAIA,GAAG;EACnBN,SAAS,EAAEH;AACf,CAAC,EACD;EACIK,QAAQ,EAAER,KAAK,IAAIA,KAAK,IAAI,IAAI;EAChCa,UAAU,EAAEA,CAAA,KAAM,IAAIjB,MAAM,CAAC,IAAI,CAAC;EAClCa,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,wBAAwB;EAC7BI,IAAI,EAAE,QAAQ;EACdH,OAAO,EAAEA,CAAA,KAAM,IAAI;EACnBL,SAAS,EAAEH;AACf,CAAC,EACD;EACIK,QAAQ,EAAER,KAAK,IAAI,OAAOA,KAAK,KAAK,SAAS;EAC7CS,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,wBAAwB;EAC7BI,IAAI,EAAE,cAAc;EACpBH,OAAO,EAAEC,GAAG,IAAIA,GAAG,KAAK,MAAM;EAC9BN,SAAS,EAAEH;AACf,CAAC,EACD;EACIK,QAAQ,EAAET,WAAW;EACrBU,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,uBAAuB;EAC5BI,IAAI,EAAE,uBAAuB;EAC7BH,OAAO,EAAEA,CAACC,GAAG,EAAEG,QAAQ,EAAAC,KAAA;IAAA,IAAE;MAAEC;IAAY,CAAC,GAAAD,KAAA;IAAA,OAAKC,WAAW,GAAGC,MAAM,CAACN,GAAG,CAAC,GAAGO,QAAQ,CAACP,GAAG,EAAE,EAAE,CAAC;EAAA;EAC1FN,SAAS,EAAEc,KAAA;IAAA,IAAC;MAAEpB;IAAM,CAAC,GAAAoB,KAAA;IAAA,OAAKrB,WAAW,CAACC,KAAK,CAAC,GAAGA,KAAK,CAACqB,QAAQ,CAAC,CAAC,GAAGhB,IAAI,CAACC,SAAS,CAACN,KAAK,CAAC;EAAA;AAC3F,CAAC,EACD;EACIQ,QAAQ,EAAER,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ;EAC5CS,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,yBAAyB;EAC9BI,IAAI,EAAE,wDAAwD;EAC9DH,OAAO,EAAEC,GAAG,IAAIU,UAAU,CAACV,GAAG,CAAC;EAC/BN,SAAS,EAAEH;AACf,CAAC,CACJ;AACD,MAAMoB,SAAS,GAAG;EACdd,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,EAAE;EACPI,IAAI,EAAE,GAAG;EACTH,OAAOA,CAACC,GAAG,EAAEY,OAAO,EAAE;IAClBA,OAAO,4BAAAC,MAAA,CAA4BpB,IAAI,CAACC,SAAS,CAACM,GAAG,CAAC,CAAE,CAAC;IACzD,OAAOA,GAAG;EACd;AACJ,CAAC;AACD,MAAMc,MAAM,GAAG,CAAC7B,GAAG,EAAEC,GAAG,CAAC,CAAC2B,MAAM,CAAClB,WAAW,EAAEgB,SAAS,CAAC;AAExD,SAASG,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}