{"ast":null,"code":"var _jsxFileName = \"/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/components/dataset/GetDataset.jsx\";\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass GetDataset extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      serverUrl: 'http://localhost:5220/dataset',\n      isLoaded: false,\n      datasetOriginalJSON: JSON,\n      hasDataset: false\n    };\n  }\n  // componentDidMount() {\n  //     this.checkConnection()\n  //     this.fetchData();\n  // }\n  //\n  // checkConnection() {\n  //     try {\n  //         const response = fetch(this.state.serverUrl)\n  //         console.log(response.then())\n  //\n  //     } catch (error) {\n  //         console.log(error);\n  //     }\n  // }\n\n  // async fetchData() {\n  //     console.log(\"Fetch data\")\n  //     try {\n  //         const response = await fetch(this.state.serverUrl)\n  //         if (!response.ok) {\n  //             throw new Error('Network response was not ok');\n  //         }\n  //\n  //         const result = await response.json();\n  //         const size = result.items.length\n  //         if (size === 0) {\n  //             this.setState({\n  //                 isLoaded: true,\n  //                 hasDataset : false\n  //             });\n  //         } else {\n  //             this.setState({\n  //                 isLoaded: true,\n  //                 datasetOriginalJSON: result.items[0],\n  //                 hasDataset : true\n  //             });\n  //         }\n  //     } catch (error) {\n  //         console.error(error);\n  //     }\n  // }\n\n  // fetchData() {\n  //     console.log(\"Fetch data\")\n  //     try {\n  //         fetch(this.state.serverUrl)\n  //             .then(res => res.json())\n  //             .then(\n  //                 (result) => {\n  //                     this.setState({\n  //                         isLoaded: true,\n  //                         datasetOriginalJSON: result.items[0]\n  //                     });\n  //                 },\n  //                 (error) => {\n  //                     this.setState({\n  //                         isLoaded: false,\n  //                         error\n  //                     });\n  //                 }\n  //             )\n  //     } catch (error) {\n  //         console.error(error);\n  //     }\n  // }\n\n  render() {\n    const {\n      hasDataset,\n      isLoaded,\n      datasetOriginalJSON\n    } = this.props;\n    if (!hasDataset) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GetDataset\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"There is no Alive Dataset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 20\n      }, this);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GetDataset\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GetDataset\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"DS Name\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Data Set Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), datasetOriginalJSON.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"DS Path\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Data Set Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), datasetOriginalJSON.path]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"DS Status\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Data Set Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"DS JSON\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Original JSON:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: JSON.stringify(this.state.datasetOriginalJSON)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this);\n    }\n  }\n}\nexport default GetDataset;","map":{"version":3,"names":["Component","jsxDEV","_jsxDEV","Fragment","_Fragment","GetDataset","constructor","args","state","serverUrl","isLoaded","datasetOriginalJSON","JSON","hasDataset","render","props","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","path","stringify"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/components/dataset/GetDataset.jsx"],"sourcesContent":["import { Component } from 'react';\n\n\nclass GetDataset extends Component {\n    state = {\n        serverUrl: 'http://localhost:5220/dataset',\n        isLoaded: false,\n        datasetOriginalJSON: JSON,\n        hasDataset: false\n    };\n\n    // componentDidMount() {\n    //     this.checkConnection()\n    //     this.fetchData();\n    // }\n    //\n    // checkConnection() {\n    //     try {\n    //         const response = fetch(this.state.serverUrl)\n    //         console.log(response.then())\n    //\n    //     } catch (error) {\n    //         console.log(error);\n    //     }\n    // }\n\n    // async fetchData() {\n    //     console.log(\"Fetch data\")\n    //     try {\n    //         const response = await fetch(this.state.serverUrl)\n    //         if (!response.ok) {\n    //             throw new Error('Network response was not ok');\n    //         }\n    //\n    //         const result = await response.json();\n    //         const size = result.items.length\n    //         if (size === 0) {\n    //             this.setState({\n    //                 isLoaded: true,\n    //                 hasDataset : false\n    //             });\n    //         } else {\n    //             this.setState({\n    //                 isLoaded: true,\n    //                 datasetOriginalJSON: result.items[0],\n    //                 hasDataset : true\n    //             });\n    //         }\n    //     } catch (error) {\n    //         console.error(error);\n    //     }\n    // }\n\n    // fetchData() {\n    //     console.log(\"Fetch data\")\n    //     try {\n    //         fetch(this.state.serverUrl)\n    //             .then(res => res.json())\n    //             .then(\n    //                 (result) => {\n    //                     this.setState({\n    //                         isLoaded: true,\n    //                         datasetOriginalJSON: result.items[0]\n    //                     });\n    //                 },\n    //                 (error) => {\n    //                     this.setState({\n    //                         isLoaded: false,\n    //                         error\n    //                     });\n    //                 }\n    //             )\n    //     } catch (error) {\n    //         console.error(error);\n    //     }\n    // }\n\n    render() {\n        const {hasDataset, isLoaded, datasetOriginalJSON} = this.props;\n        if (!hasDataset) {\n            return <div className=\"GetDataset\">\n                <h2>\n                    There is no Alive Dataset\n                </h2>\n            </div>;\n        } else if (!isLoaded) {\n            return <div className=\"GetDataset\">Loading...</div>;\n        } else {\n            return (\n                <div className=\"GetDataset\">\n\n                    <div className='DS Name'>\n                        <h3>Data Set Name:</h3>\n                        {datasetOriginalJSON.name}\n                    </div>\n\n                    <div className='DS Path'>\n                        <h3>Data Set Status:</h3>\n                        {datasetOriginalJSON.path}\n                    </div>\n\n                    <div className='DS Status'>\n                        <h3>Data Set Status:</h3>\n                        {/*<h4>boundedAlluxioCluster: </h4>*/}\n                        {/*{dataset.status?.get('boundedAlluxioCluster')}*/}\n                        {/*<h4>phase: </h4>*/}\n                        {/*{dataset.status?.get('phase')}*/}\n                    </div>\n\n                    <div className='DS JSON'>\n                        <h3>Original JSON:</h3>\n                        <>{JSON.stringify(this.state.datasetOriginalJSON)}</>\n\n                    </div>\n\n                </div>\n            );\n        }\n    }\n}\n\nexport default GetDataset\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}