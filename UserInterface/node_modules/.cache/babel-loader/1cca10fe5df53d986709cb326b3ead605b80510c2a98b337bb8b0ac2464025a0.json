{"ast":null,"code":"var _jsxFileName = \"/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/components/dataset/Datasets.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport Dataset from \"./Dataset\";\nimport { AlertMethod } from \"../alert/Alert\";\nimport { sendRequest, getRequest, convertInputToStringifyJSON, FetchHeaders } from \"../../util/util\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst serverUrl = '/api/dataset';\nfunction Datasets({\n  handleSendRequest\n}) {\n  _s();\n  const [datasetList, setDatasetList] = useState([]);\n  const [alertMethod, setAlertMethod] = useState(null);\n  const [alertMessage, setAlertMessage] = useState('');\n  useEffect(() => {\n    const interval = setInterval(() => {\n      handleGetRequest();\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  const handleGetRequest = () => {\n    // Replace `getRequest` and `serverUrl` with actual values\n    getRequest(serverUrl).then(statusCodeAndMsg => {\n      if (statusCodeAndMsg[0] === AlertMethod.Success) {\n        const numberOfDataset = statusCodeAndMsg[2]['datasets'].length;\n        const newDatasetList = [];\n        for (let i = 0; i < numberOfDataset; i++) {\n          newDatasetList.push(statusCodeAndMsg[2]['datasets'][i]);\n        }\n        setDatasetList(newDatasetList);\n      } else {\n        setAlertMethod(statusCodeAndMsg[0]);\n        setAlertMessage(statusCodeAndMsg[1]);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      sx: {\n        minWidth: 650\n      },\n      \"aria-label\": \"simple table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Dataset Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"left\",\n            children: \"Phase\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"right\",\n            children: \"Bounded Alluxio Cluster\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"right\",\n            children: \"Setting\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: datasetList.map(originalJSON => /*#__PURE__*/_jsxDEV(Dataset, {\n          name: originalJSON['dataset-config']['name'],\n          originalJSON: originalJSON,\n          handleSendRequest: handleSendRequest\n        }, originalJSON['dataset-config']['name'], false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(Datasets, \"86DR2gIVm0P8ynFtrwKVNWdUat8=\");\n_c = Datasets;\nexport default Datasets;\nvar _c;\n$RefreshReg$(_c, \"Datasets\");","map":{"version":3,"names":["React","useState","useEffect","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Dataset","AlertMethod","sendRequest","getRequest","convertInputToStringifyJSON","FetchHeaders","jsxDEV","_jsxDEV","serverUrl","Datasets","handleSendRequest","_s","datasetList","setDatasetList","alertMethod","setAlertMethod","alertMessage","setAlertMessage","interval","setInterval","handleGetRequest","clearInterval","then","statusCodeAndMsg","Success","numberOfDataset","length","newDatasetList","i","push","component","children","sx","minWidth","fileName","_jsxFileName","lineNumber","columnNumber","align","map","originalJSON","name","_c","$RefreshReg$"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/components/dataset/Datasets.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport Dataset from \"./Dataset\";\nimport {AlertMethod} from \"../alert/Alert\";\nimport {sendRequest, getRequest, convertInputToStringifyJSON, FetchHeaders} from \"../../util/util\"\n\n\nconst serverUrl = '/api/dataset'\n\nfunction Datasets({handleSendRequest }) {\n    const [datasetList, setDatasetList] = useState([]);\n    const [alertMethod, setAlertMethod] = useState(null);\n    const [alertMessage, setAlertMessage] = useState('');\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            handleGetRequest();\n        }, 2000);\n\n        return () => clearInterval(interval);\n    }, []);\n\n    const handleGetRequest = () => {\n        // Replace `getRequest` and `serverUrl` with actual values\n        getRequest(serverUrl).then(statusCodeAndMsg => {\n            if (statusCodeAndMsg[0] === AlertMethod.Success) {\n                const numberOfDataset = statusCodeAndMsg[2]['datasets'].length;\n                const newDatasetList = [];\n                for (let i = 0; i < numberOfDataset; i++) {\n                    newDatasetList.push(statusCodeAndMsg[2]['datasets'][i]);\n                }\n\n                setDatasetList(newDatasetList);\n            } else {\n                setAlertMethod(statusCodeAndMsg[0]);\n                setAlertMessage(statusCodeAndMsg[1]);\n            }\n        });\n    };\n\n    return (\n        <TableContainer component={Paper}>\n            <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Dataset Name</TableCell>\n                        <TableCell align=\"left\">Phase</TableCell>\n                        <TableCell align=\"right\">Bounded Alluxio Cluster</TableCell>\n                        <TableCell align=\"right\">Setting</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {datasetList.map((originalJSON) => (\n                        <Dataset\n                            key={originalJSON['dataset-config']['name']}\n                            name={originalJSON['dataset-config']['name']}\n                            originalJSON={originalJSON}\n                            handleSendRequest={handleSendRequest}\n                        />\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\nexport default Datasets;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAAQC,WAAW,QAAO,gBAAgB;AAC1C,SAAQC,WAAW,EAAEC,UAAU,EAAEC,2BAA2B,EAAEC,YAAY,QAAO,iBAAiB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGlG,MAAMC,SAAS,GAAG,cAAc;AAEhC,SAASC,QAAQA,CAAC;EAACC;AAAkB,CAAC,EAAE;EAAAC,EAAA;EACpC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACyB,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACZ,MAAM0B,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/BC,gBAAgB,CAAC,CAAC;IACtB,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMC,aAAa,CAACH,QAAQ,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,gBAAgB,GAAGA,CAAA,KAAM;IAC3B;IACAjB,UAAU,CAACK,SAAS,CAAC,CAACc,IAAI,CAACC,gBAAgB,IAAI;MAC3C,IAAIA,gBAAgB,CAAC,CAAC,CAAC,KAAKtB,WAAW,CAACuB,OAAO,EAAE;QAC7C,MAAMC,eAAe,GAAGF,gBAAgB,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAACG,MAAM;QAC9D,MAAMC,cAAc,GAAG,EAAE;QACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,eAAe,EAAEG,CAAC,EAAE,EAAE;UACtCD,cAAc,CAACE,IAAI,CAACN,gBAAgB,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAACK,CAAC,CAAC,CAAC;QAC3D;QAEAf,cAAc,CAACc,cAAc,CAAC;MAClC,CAAC,MAAM;QACHZ,cAAc,CAACQ,gBAAgB,CAAC,CAAC,CAAC,CAAC;QACnCN,eAAe,CAACM,gBAAgB,CAAC,CAAC,CAAC,CAAC;MACxC;IACJ,CAAC,CAAC;EACN,CAAC;EAED,oBACIhB,OAAA,CAACX,cAAc;IAACkC,SAAS,EAAE/B,KAAM;IAAAgC,QAAA,eAC7BxB,OAAA,CAACd,KAAK;MAACuC,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAI,CAAE;MAAC,cAAW,cAAc;MAAAF,QAAA,gBACnDxB,OAAA,CAACV,SAAS;QAAAkC,QAAA,eACNxB,OAAA,CAACT,QAAQ;UAAAiC,QAAA,gBACLxB,OAAA,CAACZ,SAAS;YAAAoC,QAAA,EAAC;UAAY;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC,eACnC9B,OAAA,CAACZ,SAAS;YAAC2C,KAAK,EAAC,MAAM;YAAAP,QAAA,EAAC;UAAK;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC,eACzC9B,OAAA,CAACZ,SAAS;YAAC2C,KAAK,EAAC,OAAO;YAAAP,QAAA,EAAC;UAAuB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC,eAC5D9B,OAAA,CAACZ,SAAS;YAAC2C,KAAK,EAAC,OAAO;YAAAP,QAAA,EAAC;UAAO;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eACZ9B,OAAA,CAACb,SAAS;QAAAqC,QAAA,EACLnB,WAAW,CAAC2B,GAAG,CAAEC,YAAY,iBAC1BjC,OAAA,CAACP,OAAO;UAEJyC,IAAI,EAAED,YAAY,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAE;UAC7CA,YAAY,EAAEA,YAAa;UAC3B9B,iBAAiB,EAAEA;QAAkB,GAHhC8B,YAAY,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAI9C,CACJ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEzB;AAAC1B,EAAA,CAvDQF,QAAQ;AAAAiC,EAAA,GAARjC,QAAQ;AAyDjB,eAAeA,QAAQ;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}