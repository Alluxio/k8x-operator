{"ast":null,"code":"var _jsxFileName = \"/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/pages/dataset-controller.jsx\";\nimport React, { Component } from 'react';\nimport CreateDataset from '../components/dataset/CreateDataset';\nimport ShowDataset from '../components/dataset/ShowDataset';\nimport DeleteDataset from \"../components/dataset/DeleteDataset\";\nimport Alert from '@mui/material/Alert';\nimport Stack from '@mui/material/Stack';\nimport Dataset from \"../components/dataset/Dataset\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DatasetUpdateStatus = {\n  NoStatus: 0,\n  Success: 1,\n  WrongJSON: 2,\n  UnableToCreate: 3\n};\nconst DatasetUpdateStatusElement = [/*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Alert, {\n  variant: \"outlined\",\n  severity: \"success\",\n  children: \"Success!\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 18,\n  columnNumber: 5\n}, this), /*#__PURE__*/_jsxDEV(Alert, {\n  variant: \"outlined\",\n  severity: \"warning\",\n  children: \"Unable to Create JSON Object, check input!\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 21,\n  columnNumber: 5\n}, this), /*#__PURE__*/_jsxDEV(Alert, {\n  variant: \"outlined\",\n  severity: \"error\",\n  children: \"Unable to Create!\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 24,\n  columnNumber: 5\n}, this)];\nclass DatasetController extends Component {\n  constructor(props) {\n    super(props);\n    //\n    this.handleCreateDataset = stringifyJSON => {\n      try {\n        const newObj = JSON.parse(stringifyJSON);\n        console.log(JSON.stringify(newObj));\n\n        // Send Data\n        this.sendPOST(newObj).then(status => {\n          console.log(status);\n          this.setState({\n            datasetUpdateStatus: status\n          });\n        });\n      } catch (e) {\n        console.error(e);\n        this.setState({\n          datasetUpdateStatus: DatasetUpdateStatus.WrongJSON\n        });\n      }\n    };\n    this.state = {\n      serverUrl: 'http://localhost:5220/dataset',\n      isLoaded: false,\n      hasDataset: false,\n      error: '',\n      datasetListJSON: JSON,\n      datasetUpdateStatus: DatasetUpdateStatus.NoStatus\n    };\n    this.fetchData = this.fetchData.bind(this);\n  }\n  componentDidMount() {\n    this.fetchData();\n  }\n  async fetchData() {\n    console.log(\"Fetch data\");\n    try {\n      const response = await fetch(this.state.serverUrl);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const result = await response.json();\n      if (result.datasets.length === 0) {\n        this.setState({\n          isLoaded: true,\n          hasDataset: false\n        });\n      } else {\n        this.setState({\n          isLoaded: true,\n          hasDataset: true,\n          datasetListJSON: result.datasets\n          // datasetOriginalJSON: result.items[0],\n          // datasetStatusJSON: result.items[0].status,\n          // datasetConfigJSON: result.items[0].datasetConfig,\n        });\n      }\n    } catch (error) {\n      console.error(error);\n      this.setState({\n        error: error\n      });\n    }\n  }\n  async sendPOST(JSONObject) {\n    // POST request using fetch with async/await\n    const requestOptions = {\n      method: 'POST',\n      body: JSON.stringify(JSONObject)\n    };\n    const response = await fetch(this.state.serverUrl, requestOptions);\n    if (!response.ok) {\n      return DatasetUpdateStatus.UnableToCreate;\n    }\n    const data = await response.json();\n    return DatasetUpdateStatus.Success;\n  }\n  render() {\n    const {\n      hasDataset,\n      datasetListJSON\n    } = this.state;\n    const numberOfDataset = datasetListJSON.length;\n    const datasetElements = [];\n    for (let i = 0; i < numberOfDataset; i++) {\n      const datasetOriginalJSON = datasetListJSON[i];\n      console.log(JSON.stringify(datasetOriginalJSON));\n      datasetElements.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Dataset, {\n          datasetOriginalJSON: datasetOriginalJSON\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this));\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Dataset\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Dataset Controller Panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"There are \", numberOfDataset, \" Datasets\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), datasetElements, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Indicator\",\n        children: DatasetUpdateStatusElement[this.state.datasetUpdateStatus]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default DatasetController;","map":{"version":3,"names":["React","Component","CreateDataset","ShowDataset","DeleteDataset","Alert","Stack","Dataset","Fragment","_Fragment","jsxDEV","_jsxDEV","DatasetUpdateStatus","NoStatus","Success","WrongJSON","UnableToCreate","DatasetUpdateStatusElement","variant","severity","children","fileName","_jsxFileName","lineNumber","columnNumber","DatasetController","constructor","props","handleCreateDataset","stringifyJSON","newObj","JSON","parse","console","log","stringify","sendPOST","then","status","setState","datasetUpdateStatus","e","error","state","serverUrl","isLoaded","hasDataset","datasetListJSON","fetchData","bind","componentDidMount","response","fetch","ok","Error","result","json","datasets","length","JSONObject","requestOptions","method","body","data","render","numberOfDataset","datasetElements","i","datasetOriginalJSON","push","className"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/pages/dataset-controller.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport CreateDataset from '../components/dataset/CreateDataset';\nimport ShowDataset from '../components/dataset/ShowDataset';\nimport DeleteDataset from \"../components/dataset/DeleteDataset\";\nimport Alert from '@mui/material/Alert';\nimport Stack from '@mui/material/Stack';\nimport Dataset from \"../components/dataset/Dataset\";\n\nconst DatasetUpdateStatus =  {\n    NoStatus : 0,\n    Success : 1,\n    WrongJSON : 2,\n    UnableToCreate : 3,\n}\n\nconst DatasetUpdateStatusElement = [\n    <></>,\n    <Alert variant=\"outlined\" severity=\"success\">\n        Success!\n    </Alert>,\n    <Alert variant=\"outlined\" severity=\"warning\">\n        Unable to Create JSON Object, check input!\n    </Alert>,\n    <Alert variant=\"outlined\" severity=\"error\">\n        Unable to Create!\n    </Alert>\n]\n\nclass DatasetController extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            serverUrl: 'http://localhost:5220/dataset',\n            isLoaded: false,\n            hasDataset: false,\n            error: '',\n\n            datasetListJSON: JSON,\n\n            datasetUpdateStatus: DatasetUpdateStatus.NoStatus\n        };\n\n        this.fetchData = this.fetchData.bind(this)\n    }\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n    async fetchData() {\n        console.log(\"Fetch data\")\n        try {\n            const response = await fetch(this.state.serverUrl)\n            if (!response.ok) { throw new Error('Network response was not ok');}\n\n            const result = await response.json();\n            if (result.datasets.length === 0) {\n                this.setState({\n                    isLoaded: true,\n                    hasDataset : false\n                });\n            } else {\n                this.setState({\n                    isLoaded: true,\n                    hasDataset : true,\n\n                    datasetListJSON : result.datasets,\n                    // datasetOriginalJSON: result.items[0],\n                    // datasetStatusJSON: result.items[0].status,\n                    // datasetConfigJSON: result.items[0].datasetConfig,\n                });\n            }\n        } catch (error) {\n            console.error(error);\n            this.setState({\n                error: error\n            });\n        }\n    }\n\n    async sendPOST(JSONObject) {\n        // POST request using fetch with async/await\n        const requestOptions = {\n            method: 'POST',\n            body: JSON.stringify(JSONObject)\n        };\n        const response = await fetch(this.state.serverUrl, requestOptions);\n        if (!response.ok) {\n            return DatasetUpdateStatus.UnableToCreate\n        }\n\n        const data = await response.json();\n\n        return DatasetUpdateStatus.Success\n    }\n\n    //\n\n    handleCreateDataset = (stringifyJSON) => {\n        try {\n            const newObj = JSON.parse(stringifyJSON)\n            console.log(JSON.stringify(newObj))\n\n            // Send Data\n            this.sendPOST(newObj).then(status => {\n                console.log(status)\n                this.setState(\n                    {datasetUpdateStatus: status}\n                )\n            })\n\n        } catch (e) {\n            console.error(e)\n            this.setState(\n                {datasetUpdateStatus: DatasetUpdateStatus.WrongJSON}\n            )\n        }\n    };\n\n    render() {\n        const {hasDataset, datasetListJSON} = this.state\n\n        const numberOfDataset = datasetListJSON.length\n\n        const datasetElements = [];\n\n        for (let i = 0; i < numberOfDataset; i++) {\n            const datasetOriginalJSON = datasetListJSON[i]\n            console.log(JSON.stringify(datasetOriginalJSON))\n\n            datasetElements.push(\n                <div key={i}>\n                    <Dataset key={i} datasetOriginalJSON={datasetOriginalJSON}/>\n                </div>\n            );\n        }\n\n\n        return (\n            <div className=\"Dataset\">\n                <h1>Dataset Controller Panel</h1>\n\n                <h2>There are {numberOfDataset} Datasets</h2>\n\n                {datasetElements}\n\n                <div className=\"Indicator\">\n                    {DatasetUpdateStatusElement[this.state.datasetUpdateStatus]}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DatasetController;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}