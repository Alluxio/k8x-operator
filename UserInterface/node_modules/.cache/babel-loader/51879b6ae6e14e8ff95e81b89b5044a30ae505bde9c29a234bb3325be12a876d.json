{"ast":null,"code":"var _jsxFileName = \"/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/containers/alluxio-controller.jsx\";\nimport React, { Component } from 'react';\nimport { AlertMethod } from \"../components/alert/Alert\";\nimport { sendRequest, getRequest, convertToStringifyJSON, FetchHeaders, generateHttpRequestOptions } from \"../util/util\";\nimport AlluxioClusters from \"../components/alluxio_cluster/AlluxioClusters\";\nimport CreateObject from \"../util/CreateObject\";\nimport { connect } from 'react-redux';\nimport { setAlert } from \"../redux/actions/alertActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapStateToProps = state => ({\n  alertMethod: state.alert.alertMethod,\n  alertMessage: state.alert.alertMessage\n});\nconst mapDispatchToProps = dispatch => ({\n  setAlert: (alertMethod, alertMessage) => dispatch(setAlert(alertMethod, alertMessage))\n});\nconst serverUrl = '/api/alluxio_cluster';\nclass AlluxioController extends Component {\n  constructor(props) {\n    super(props);\n    this.handleGetRequest = () => {\n      // Call getRequest\n      getRequest(serverUrl).then(statusCodeAndMsg => {\n        if (statusCodeAndMsg[0] === AlertMethod.Success) {\n          const numberOfAlluxio = statusCodeAndMsg[2]['alluxio-clusters'].length;\n          const newAlluxioList = [];\n          for (let i = 0; i < numberOfAlluxio; i++) {\n            newAlluxioList.push(statusCodeAndMsg[2]['alluxio-clusters'][i]);\n          }\n          this.setState({\n            alluxioList: newAlluxioList\n          });\n        } else {\n          this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1]);\n        }\n      });\n    };\n    // handleSendRequest is a func that will call sendRequest() and update the panel status\n    this.handleSendRequest = (httpMethod, dataType, inputData) => {\n      // Prep HTTP Request Options\n      let requestOptions = {};\n      try {\n        requestOptions = generateHttpRequestOptions(httpMethod, dataType, inputData);\n      } catch (error) {\n        this.props.setAlert(AlertMethod.Warning, 'Unable to Parse Input. ' + error);\n        return;\n      }\n\n      // Send Request\n      sendRequest(requestOptions, serverUrl).then(statusCodeAndMsg => {\n        this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1]);\n      });\n    };\n    this.state = {\n      alluxioList: []\n    };\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.handleGetRequest();\n    }, 2000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Alluxio\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Alluxio Controller Panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CreateObject, {\n        objectKind: 'Alluxio Cluster',\n        handleSendRequest: this.handleSendRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AlluxioClusters, {\n        alluxioList: this.state.alluxioList,\n        handleSendRequest: this.handleSendRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AlluxioController);","map":{"version":3,"names":["React","Component","AlertMethod","sendRequest","getRequest","convertToStringifyJSON","FetchHeaders","generateHttpRequestOptions","AlluxioClusters","CreateObject","connect","setAlert","jsxDEV","_jsxDEV","mapStateToProps","state","alertMethod","alert","alertMessage","mapDispatchToProps","dispatch","serverUrl","AlluxioController","constructor","props","handleGetRequest","then","statusCodeAndMsg","Success","numberOfAlluxio","length","newAlluxioList","i","push","setState","alluxioList","handleSendRequest","httpMethod","dataType","inputData","requestOptions","error","Warning","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","objectKind"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/containers/alluxio-controller.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport {AlertMethod} from \"../components/alert/Alert\";\nimport {sendRequest, getRequest, convertToStringifyJSON, FetchHeaders, generateHttpRequestOptions} from \"../util/util\";\nimport AlluxioClusters from \"../components/alluxio_cluster/AlluxioClusters\";\nimport CreateObject from \"../util/CreateObject\";\n\nimport { connect } from 'react-redux';\nimport {setAlert} from \"../redux/actions/alertActions\";\n\nconst mapStateToProps = state => ({\n    alertMethod: state.alert.alertMethod,\n    alertMessage: state.alert.alertMessage,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    setAlert: (alertMethod, alertMessage) => dispatch(setAlert(alertMethod, alertMessage)),\n});\n\nconst serverUrl = '/api/alluxio_cluster'\n\nclass AlluxioController extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            alluxioList: [],\n        };\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.handleGetRequest()\n        }, 2000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    handleGetRequest = () =>  {\n        // Call getRequest\n        getRequest(serverUrl).then(statusCodeAndMsg => {\n            if (statusCodeAndMsg[0] === AlertMethod.Success) {\n                const numberOfAlluxio = statusCodeAndMsg[2]['alluxio-clusters'].length\n                const newAlluxioList = [];\n                for (let i = 0; i < numberOfAlluxio; i++) {\n                    newAlluxioList.push(statusCodeAndMsg[2]['alluxio-clusters'][i])\n                }\n\n                this.setState({alluxioList: newAlluxioList})\n            } else {\n                this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1])\n            }\n        })\n    }\n\n    // handleSendRequest is a func that will call sendRequest() and update the panel status\n    handleSendRequest = (httpMethod, dataType, inputData) =>  {\n        // Prep HTTP Request Options\n        let requestOptions = {}\n        try {\n            requestOptions = generateHttpRequestOptions(httpMethod, dataType, inputData)\n        } catch (error){\n            this.props.setAlert(AlertMethod.Warning, 'Unable to Parse Input. ' + error)\n            return\n        }\n\n        // Send Request\n        sendRequest(requestOptions, serverUrl).then(statusCodeAndMsg => {\n            this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1])\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Alluxio\">\n                <h1>Alluxio Controller Panel</h1>\n                <br/>\n                <CreateObject\n                    objectKind={'Alluxio Cluster'}\n                    handleSendRequest={this.handleSendRequest}\n                />\n                <br/>\n                <AlluxioClusters\n                    alluxioList={this.state.alluxioList}\n                    handleSendRequest={this.handleSendRequest}\n                />\n            </div>\n        );\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AlluxioController);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}