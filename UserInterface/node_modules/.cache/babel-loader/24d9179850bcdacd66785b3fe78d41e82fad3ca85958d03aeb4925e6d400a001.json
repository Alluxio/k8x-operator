{"ast":null,"code":"import { isNode } from '../nodes/identity.js';\nimport { createStringifyContext, stringify } from './stringify.js';\nimport { indentComment, lineComment } from './stringifyComment.js';\nfunction stringifyDocument(doc, options) {\n  var _doc$directives;\n  const lines = [];\n  let hasDirectives = options.directives === true;\n  if (options.directives !== false && doc.directives) {\n    const dir = doc.directives.toString(doc);\n    if (dir) {\n      lines.push(dir);\n      hasDirectives = true;\n    } else if (doc.directives.docStart) hasDirectives = true;\n  }\n  if (hasDirectives) lines.push('---');\n  const ctx = createStringifyContext(doc, options);\n  const {\n    commentString\n  } = ctx.options;\n  if (doc.commentBefore) {\n    if (lines.length !== 1) lines.unshift('');\n    const cs = commentString(doc.commentBefore);\n    lines.unshift(indentComment(cs, ''));\n  }\n  let chompKeep = false;\n  let contentComment = null;\n  if (doc.contents) {\n    if (isNode(doc.contents)) {\n      if (doc.contents.spaceBefore && hasDirectives) lines.push('');\n      if (doc.contents.commentBefore) {\n        const cs = commentString(doc.contents.commentBefore);\n        lines.push(indentComment(cs, ''));\n      }\n      // top-level block scalars need to be indented if followed by a comment\n      ctx.forceBlockIndent = !!doc.comment;\n      contentComment = doc.contents.comment;\n    }\n    const onChompKeep = contentComment ? undefined : () => chompKeep = true;\n    let body = stringify(doc.contents, ctx, () => contentComment = null, onChompKeep);\n    if (contentComment) body += lineComment(body, '', commentString(contentComment));\n    if ((body[0] === '|' || body[0] === '>') && lines[lines.length - 1] === '---') {\n      // Top-level block scalars with a preceding doc marker ought to use the\n      // same line for their header.\n      lines[lines.length - 1] = \"--- \".concat(body);\n    } else lines.push(body);\n  } else {\n    lines.push(stringify(doc.contents, ctx));\n  }\n  if ((_doc$directives = doc.directives) !== null && _doc$directives !== void 0 && _doc$directives.docEnd) {\n    if (doc.comment) {\n      const cs = commentString(doc.comment);\n      if (cs.includes('\\n')) {\n        lines.push('...');\n        lines.push(indentComment(cs, ''));\n      } else {\n        lines.push(\"... \".concat(cs));\n      }\n    } else {\n      lines.push('...');\n    }\n  } else {\n    let dc = doc.comment;\n    if (dc && chompKeep) dc = dc.replace(/^\\n+/, '');\n    if (dc) {\n      if ((!chompKeep || contentComment) && lines[lines.length - 1] !== '') lines.push('');\n      lines.push(indentComment(commentString(dc), ''));\n    }\n  }\n  return lines.join('\\n') + '\\n';\n}\nexport { stringifyDocument };","map":{"version":3,"names":["isNode","createStringifyContext","stringify","indentComment","lineComment","stringifyDocument","doc","options","_doc$directives","lines","hasDirectives","directives","dir","toString","push","docStart","ctx","commentString","commentBefore","length","unshift","cs","chompKeep","contentComment","contents","spaceBefore","forceBlockIndent","comment","onChompKeep","undefined","body","concat","docEnd","includes","dc","replace","join"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/node_modules/yaml/browser/dist/stringify/stringifyDocument.js"],"sourcesContent":["import { isNode } from '../nodes/identity.js';\nimport { createStringifyContext, stringify } from './stringify.js';\nimport { indentComment, lineComment } from './stringifyComment.js';\n\nfunction stringifyDocument(doc, options) {\n    const lines = [];\n    let hasDirectives = options.directives === true;\n    if (options.directives !== false && doc.directives) {\n        const dir = doc.directives.toString(doc);\n        if (dir) {\n            lines.push(dir);\n            hasDirectives = true;\n        }\n        else if (doc.directives.docStart)\n            hasDirectives = true;\n    }\n    if (hasDirectives)\n        lines.push('---');\n    const ctx = createStringifyContext(doc, options);\n    const { commentString } = ctx.options;\n    if (doc.commentBefore) {\n        if (lines.length !== 1)\n            lines.unshift('');\n        const cs = commentString(doc.commentBefore);\n        lines.unshift(indentComment(cs, ''));\n    }\n    let chompKeep = false;\n    let contentComment = null;\n    if (doc.contents) {\n        if (isNode(doc.contents)) {\n            if (doc.contents.spaceBefore && hasDirectives)\n                lines.push('');\n            if (doc.contents.commentBefore) {\n                const cs = commentString(doc.contents.commentBefore);\n                lines.push(indentComment(cs, ''));\n            }\n            // top-level block scalars need to be indented if followed by a comment\n            ctx.forceBlockIndent = !!doc.comment;\n            contentComment = doc.contents.comment;\n        }\n        const onChompKeep = contentComment ? undefined : () => (chompKeep = true);\n        let body = stringify(doc.contents, ctx, () => (contentComment = null), onChompKeep);\n        if (contentComment)\n            body += lineComment(body, '', commentString(contentComment));\n        if ((body[0] === '|' || body[0] === '>') &&\n            lines[lines.length - 1] === '---') {\n            // Top-level block scalars with a preceding doc marker ought to use the\n            // same line for their header.\n            lines[lines.length - 1] = `--- ${body}`;\n        }\n        else\n            lines.push(body);\n    }\n    else {\n        lines.push(stringify(doc.contents, ctx));\n    }\n    if (doc.directives?.docEnd) {\n        if (doc.comment) {\n            const cs = commentString(doc.comment);\n            if (cs.includes('\\n')) {\n                lines.push('...');\n                lines.push(indentComment(cs, ''));\n            }\n            else {\n                lines.push(`... ${cs}`);\n            }\n        }\n        else {\n            lines.push('...');\n        }\n    }\n    else {\n        let dc = doc.comment;\n        if (dc && chompKeep)\n            dc = dc.replace(/^\\n+/, '');\n        if (dc) {\n            if ((!chompKeep || contentComment) && lines[lines.length - 1] !== '')\n                lines.push('');\n            lines.push(indentComment(commentString(dc), ''));\n        }\n    }\n    return lines.join('\\n') + '\\n';\n}\n\nexport { stringifyDocument };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}