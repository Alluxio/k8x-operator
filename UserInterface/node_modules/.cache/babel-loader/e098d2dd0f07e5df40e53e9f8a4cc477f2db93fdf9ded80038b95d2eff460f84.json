{"ast":null,"code":"import { AlertMethod } from \"../alert/Alert\";\nimport YAML from 'yaml';\nexport const FetchHeaders = {\n  'Content-Type': 'application/json'\n};\n\n/**\n * Use method in requestOptions to communicate with api server.\n *\n * @param requestOptions contains http method. headers and body.\n * @param {string} serverUrl is a relative or points to your development server.\n * @function sendRequest\n * @returns [AlertMethod, AlertMessage]\n */\nexport async function sendRequest(requestOptions, serverUrl) {\n  // POST request using fetch with async/await\n  try {\n    const response = await fetch(serverUrl, requestOptions);\n    if (!response.ok) {\n      return [AlertMethod.Error, 'The Operator API returns not OK Response.'];\n    }\n    const data = response.status;\n    console.log(response);\n    console.log(JSON.stringify(data));\n    return [AlertMethod.Success, 'Success!'];\n  } catch (error) {\n    console.log(error);\n    return [AlertMethod.Error, error.toString()];\n  }\n}\n\n/**\n * Use GET method to get data\n *\n * @param {string} serverUrl is a relative or points to your development server.\n * @function getRequest\n * @returns [AlertMethod, AlertMessage, Result in JSON Object(Optional)]\n */\nexport async function getRequest(serverUrl) {\n  try {\n    const response = await fetch(serverUrl);\n    if (!response.ok) {\n      return [AlertMethod.Error, 'The Operator API returns not OK Response.'];\n    }\n    const result = await response.json();\n    console.log(result);\n    return [AlertMethod.Success, 'Success!', result];\n  } catch (error) {\n    console.log(error);\n    return [AlertMethod.Error, error.toString()];\n  }\n}\n\n/**\n * Check the input str is JSON or not\n *\n * @param {string} str is a JSON string\n * @function isJSONString\n * @returns {boolean} bool\n */\nexport function isJSONString(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Convert YAML String to JSON String\n *\n * @param {string} yamlStr is a YAML string\n * @function YAMLtoJSON\n * @returns {string} jsonStr\n */\nexport function YAMLtoJSON(yamlStr) {\n  const obj = YAML.parse(yamlStr);\n  return JSON.stringify(obj);\n}\n\n/**\n * Convert JSON String to YAML String\n *\n * @param {string} jsonStr is a YAML string\n * @function JSONtoYAML\n * @returns {string} yamlStr\n */\n_c = YAMLtoJSON;\nexport function JSONtoYAML(jsonStr) {\n  const obj = JSON.parse(jsonStr);\n  return YAML.stringify(obj);\n}\n_c2 = JSONtoYAML;\nexport function validateInputConfigAndParseAsJSON(input) {\n  try {\n    const jsonObject = JSON.parse(input);\n    return JSON.stringify(jsonObject);\n  } catch (e) {\n    // If JSON parsing fails, try YAML\n    try {\n      const yamlObject = YAML.parse(input);\n      return JSON.stringify(yamlObject);\n    } catch (yamlError) {\n      return 'ERROR';\n    }\n  }\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"YAMLtoJSON\");\n$RefreshReg$(_c2, \"JSONtoYAML\");","map":{"version":3,"names":["AlertMethod","YAML","FetchHeaders","sendRequest","requestOptions","serverUrl","response","fetch","ok","Error","data","status","console","log","JSON","stringify","Success","error","toString","getRequest","result","json","isJSONString","str","parse","e","YAMLtoJSON","yamlStr","obj","_c","JSONtoYAML","jsonStr","_c2","validateInputConfigAndParseAsJSON","input","jsonObject","yamlObject","yamlError","$RefreshReg$"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/components/util/util.jsx"],"sourcesContent":["import {AlertMethod} from \"../alert/Alert\";\nimport YAML from 'yaml'\n\nexport const FetchHeaders = {'Content-Type':'application/json'}\n\n/**\n * Use method in requestOptions to communicate with api server.\n *\n * @param requestOptions contains http method. headers and body.\n * @param {string} serverUrl is a relative or points to your development server.\n * @function sendRequest\n * @returns [AlertMethod, AlertMessage]\n */\nexport async function sendRequest(requestOptions, serverUrl) {\n    // POST request using fetch with async/await\n    try {\n        const response = await fetch(serverUrl, requestOptions);\n        if (!response.ok) {\n            return [AlertMethod.Error, 'The Operator API returns not OK Response.'];\n        }\n\n        const data = response.status;\n        console.log(response);\n        console.log(JSON.stringify(data));\n        return [AlertMethod.Success, 'Success!'];\n    } catch (error) {\n        console.log(error);\n        return [AlertMethod.Error, error.toString()];\n    }\n}\n\n\n/**\n * Use GET method to get data\n *\n * @param {string} serverUrl is a relative or points to your development server.\n * @function getRequest\n * @returns [AlertMethod, AlertMessage, Result in JSON Object(Optional)]\n */\nexport async function getRequest(serverUrl){\n    try {\n        const response = await fetch(serverUrl);\n        if (!response.ok) {\n            return [AlertMethod.Error, 'The Operator API returns not OK Response.'];\n        }\n        const result = await response.json();\n        console.log(result)\n        return [AlertMethod.Success, 'Success!', result];\n    } catch (error) {\n        console.log(error);\n        return [AlertMethod.Error, error.toString()];\n    }\n}\n\n/**\n * Check the input str is JSON or not\n *\n * @param {string} str is a JSON string\n * @function isJSONString\n * @returns {boolean} bool\n */\nexport function isJSONString(str) {\n    try {JSON.parse(str)}\n    catch (e) { return false}\n    return true;\n}\n\n/**\n * Convert YAML String to JSON String\n *\n * @param {string} yamlStr is a YAML string\n * @function YAMLtoJSON\n * @returns {string} jsonStr\n */\nexport function YAMLtoJSON(yamlStr) {\n    const obj = YAML.parse(yamlStr);\n    return JSON.stringify(obj);\n}\n\n/**\n * Convert JSON String to YAML String\n *\n * @param {string} jsonStr is a YAML string\n * @function JSONtoYAML\n * @returns {string} yamlStr\n */\nexport function JSONtoYAML(jsonStr) {\n    const obj = JSON.parse(jsonStr);\n    return YAML.stringify(obj);\n}\n\nexport function validateInputConfigAndParseAsJSON(input) {\n    try {\n        const jsonObject = JSON.parse(input);\n        return JSON.stringify(jsonObject);\n    } catch (e) {\n    // If JSON parsing fails, try YAML\n        try {\n            const yamlObject = YAML.parse(input)\n            return JSON.stringify(yamlObject);\n        } catch (yamlError) {\n            return 'ERROR'\n        }\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}