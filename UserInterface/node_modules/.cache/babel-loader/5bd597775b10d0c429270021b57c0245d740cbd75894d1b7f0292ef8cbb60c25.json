{"ast":null,"code":"import React,{Component}from'react';import CreateObject from\"../util/CreateObject\";import Datasets from\"../components/dataset/Datasets\";import{AlertMethod}from\"../components/alert/Alert\";import{sendRequest,getRequest,generateHttpRequestOptions}from\"../util/util\";import{connect}from'react-redux';import{updateDatasetList}from\"../redux/actions/datasetActions\";import{setAlert}from\"../redux/actions/alertActions\";import Box from\"@mui/material/Box\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const mapStateToProps=state=>({datasetList:state.dataset.datasetList,alertMethod:state.alert.alertMethod,alertMessage:state.alert.alertMessage});const mapDispatchToProps=dispatch=>({updateDatasetList:newList=>dispatch(updateDatasetList(newList)),setAlert:(alertMethod,alertMessage)=>dispatch(setAlert(alertMethod,alertMessage))});const serverUrl='/api/dataset';class DatasetController extends Component{constructor(){super(...arguments);this.handleGetRequest=()=>{// Call getRequest\ngetRequest(serverUrl).then(statusCodeAndMsg=>{if(statusCodeAndMsg[0]===AlertMethod.Success){const numberOfDataset=statusCodeAndMsg[2]['datasets'].length;const newDatasetList=[];for(let i=0;i<numberOfDataset;i++){newDatasetList.push(statusCodeAndMsg[2]['datasets'][i]);}// Update the dataset list in Redux store\nthis.props.updateDatasetList(newDatasetList);}else{this.props.setAlert(statusCodeAndMsg[0],statusCodeAndMsg[1]);}});};// handleSendRequest is a func that will call  and update the panel status\nthis.handleSendRequest=(httpMethod,dataType,inputData)=>{// Prep HTTP Request Options\nlet requestOptions={};try{requestOptions=generateHttpRequestOptions(httpMethod,dataType,inputData);}catch(error){this.props.setAlert(AlertMethod.Warning,'Unable to Parse Input. '+error);return;}// Send Request\nsendRequest(requestOptions,serverUrl).then(statusCodeAndMsg=>{this.props.setAlert(statusCodeAndMsg[0],statusCodeAndMsg[1]);});};}componentDidMount(){this.interval=setInterval(()=>{this.handleGetRequest();},2000);}componentWillUnmount(){clearInterval(this.interval);}render(){return/*#__PURE__*/_jsxs(\"div\",{className:\"Dataset\",children:[/*#__PURE__*/_jsx(Box,{sx:{fontSize:'18px'},children:/*#__PURE__*/_jsx(\"h1\",{children:\"Dataset Controller Panel\"})}),/*#__PURE__*/_jsx(CreateObject,{objectKind:'Dataset',handleSendRequest:this.handleSendRequest}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Datasets,{handleSendRequest:this.handleSendRequest})]});}}export default connect(mapStateToProps,mapDispatchToProps)(DatasetController);","map":{"version":3,"names":["React","Component","CreateObject","Datasets","AlertMethod","sendRequest","getRequest","generateHttpRequestOptions","connect","updateDatasetList","setAlert","Box","jsx","_jsx","jsxs","_jsxs","mapStateToProps","state","datasetList","dataset","alertMethod","alert","alertMessage","mapDispatchToProps","dispatch","newList","serverUrl","DatasetController","constructor","arguments","handleGetRequest","then","statusCodeAndMsg","Success","numberOfDataset","length","newDatasetList","i","push","props","handleSendRequest","httpMethod","dataType","inputData","requestOptions","error","Warning","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","className","children","sx","fontSize","objectKind"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/containers/dataset-controller.jsx"],"sourcesContent":["import React, { Component} from 'react';\nimport CreateObject from \"../util/CreateObject\";\nimport Datasets from \"../components/dataset/Datasets\";\nimport {AlertMethod} from \"../components/alert/Alert\";\nimport {\n    sendRequest,\n    getRequest,\n    generateHttpRequestOptions\n} from \"../util/util\";\nimport { connect } from 'react-redux';\nimport {updateDatasetList} from \"../redux/actions/datasetActions\";\nimport {setAlert} from \"../redux/actions/alertActions\";\nimport Box from \"@mui/material/Box\";\n\nconst mapStateToProps = state => ({\n    datasetList: state.dataset.datasetList,\n    alertMethod: state.alert.alertMethod,\n    alertMessage: state.alert.alertMessage,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    updateDatasetList: (newList) => dispatch(updateDatasetList(newList)),\n    setAlert: (alertMethod, alertMessage) => dispatch(setAlert(alertMethod, alertMessage)),\n});\n\nconst serverUrl = '/api/dataset'\n\nclass DatasetController extends Component {\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.handleGetRequest()\n        }, 2000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    handleGetRequest = () =>  {\n        // Call getRequest\n        getRequest(serverUrl).then(statusCodeAndMsg => {\n            if (statusCodeAndMsg[0] === AlertMethod.Success) {\n                const numberOfDataset = statusCodeAndMsg[2]['datasets'].length\n                const newDatasetList = [];\n                for (let i = 0; i < numberOfDataset; i++) {\n                    newDatasetList.push(statusCodeAndMsg[2]['datasets'][i])\n                }\n                // Update the dataset list in Redux store\n                this.props.updateDatasetList(newDatasetList);\n            } else {\n                this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1])\n            }\n        })\n    }\n\n    // handleSendRequest is a func that will call  and update the panel status\n    handleSendRequest = (httpMethod, dataType, inputData) =>  {\n        // Prep HTTP Request Options\n        let requestOptions = {}\n        try {\n            requestOptions = generateHttpRequestOptions(httpMethod, dataType, inputData)\n        } catch (error){\n            this.props.setAlert(AlertMethod.Warning, 'Unable to Parse Input. ' + error)\n            return\n        }\n\n        // Send Request\n        sendRequest(requestOptions, serverUrl).then(statusCodeAndMsg => {\n            this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1])\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Dataset\">\n                <Box sx={{fontSize: '18px'}}>\n                    <h1>Dataset Controller Panel</h1>\n                </Box>\n                <CreateObject\n                    objectKind={'Dataset'}\n                    handleSendRequest={this.handleSendRequest}\n                />\n                <br/>\n                <Datasets\n                    handleSendRequest={this.handleSendRequest}\n                />\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DatasetController);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}