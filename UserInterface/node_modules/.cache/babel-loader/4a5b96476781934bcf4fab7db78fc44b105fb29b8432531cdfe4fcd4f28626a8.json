{"ast":null,"code":"import React,{Component}from'react';import{AlertMethod}from\"../components/alert/Alert\";import{sendRequest,getRequest,generateHttpRequestOptions}from\"../util/util\";import AlluxioClusters from\"../components/alluxio_cluster/AlluxioClusters\";import CreateObject from\"../util/CreateObject\";import{connect}from'react-redux';import{setAlert}from\"../redux/actions/alertActions\";import{updateAlluxioList}from\"../redux/actions/alluxioActions\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const mapStateToProps=state=>({alertMethod:state.alert.alertMethod,alertMessage:state.alert.alertMessage,alluxioList:state.alluxio.alluxioList});const mapDispatchToProps=dispatch=>({setAlert:(alertMethod,alertMessage)=>dispatch(setAlert(alertMethod,alertMessage)),updateAlluxioList:newList=>dispatch(updateAlluxioList(newList))});const serverUrl='/api/alluxio_cluster';class AlluxioController extends Component{constructor(props){super(props);this.handleGetRequest=()=>{// Call getRequest\ngetRequest(serverUrl).then(statusCodeAndMsg=>{if(statusCodeAndMsg[0]===AlertMethod.Success){const numberOfAlluxio=statusCodeAndMsg[2]['alluxio-clusters'].length;const newAlluxioList=[];for(let i=0;i<numberOfAlluxio;i++){newAlluxioList.push(statusCodeAndMsg[2]['alluxio-clusters'][i]);}// Update the dataset list in Redux store\nthis.props.updateAlluxioList(newAlluxioList);}else{this.props.setAlert(statusCodeAndMsg[0],statusCodeAndMsg[1]);}});};// handleSendRequest is a func that will call sendRequest() and update the panel status\nthis.handleSendRequest=(httpMethod,dataType,inputData)=>{// Prep HTTP Request Options\nlet requestOptions={};try{requestOptions=generateHttpRequestOptions(httpMethod,dataType,inputData);}catch(error){this.props.setAlert(AlertMethod.Warning,'Unable to Parse Input. '+error);return;}// Send Request\nsendRequest(requestOptions,serverUrl).then(statusCodeAndMsg=>{this.props.setAlert(statusCodeAndMsg[0],statusCodeAndMsg[1]);});};}componentDidMount(){this.interval=setInterval(()=>{this.handleGetRequest();},2000);}componentWillUnmount(){clearInterval(this.interval);}render(){return/*#__PURE__*/_jsxs(\"div\",{className:\"Alluxio\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Alluxio Controller Panel\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(CreateObject,{objectKind:'Alluxio Cluster',handleSendRequest:this.handleSendRequest}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(AlluxioClusters,{handleSendRequest:this.handleSendRequest})]});}}export default connect(mapStateToProps,mapDispatchToProps)(AlluxioController);","map":{"version":3,"names":["React","Component","AlertMethod","sendRequest","getRequest","generateHttpRequestOptions","AlluxioClusters","CreateObject","connect","setAlert","updateAlluxioList","jsx","_jsx","jsxs","_jsxs","mapStateToProps","state","alertMethod","alert","alertMessage","alluxioList","alluxio","mapDispatchToProps","dispatch","newList","serverUrl","AlluxioController","constructor","props","handleGetRequest","then","statusCodeAndMsg","Success","numberOfAlluxio","length","newAlluxioList","i","push","handleSendRequest","httpMethod","dataType","inputData","requestOptions","error","Warning","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","className","children","objectKind"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/containers/alluxio-controller.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport {AlertMethod} from \"../components/alert/Alert\";\nimport {\n    sendRequest,\n    getRequest,\n    generateHttpRequestOptions\n} from \"../util/util\";\nimport AlluxioClusters from \"../components/alluxio_cluster/AlluxioClusters\";\nimport CreateObject from \"../util/CreateObject\";\n\nimport { connect } from 'react-redux';\nimport {setAlert} from \"../redux/actions/alertActions\";\nimport {updateAlluxioList} from \"../redux/actions/alluxioActions\";\n\nconst mapStateToProps = state => ({\n    alertMethod: state.alert.alertMethod,\n    alertMessage: state.alert.alertMessage,\n    alluxioList: state.alluxio.alluxioList\n});\n\nconst mapDispatchToProps = dispatch => ({\n    setAlert: (alertMethod, alertMessage) => dispatch(setAlert(alertMethod, alertMessage)),\n    updateAlluxioList: (newList) => dispatch(updateAlluxioList(newList)),\n});\n\nconst serverUrl = '/api/alluxio_cluster'\n\nclass AlluxioController extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.handleGetRequest()\n        }, 2000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    handleGetRequest = () =>  {\n        // Call getRequest\n        getRequest(serverUrl).then(statusCodeAndMsg => {\n            if (statusCodeAndMsg[0] === AlertMethod.Success) {\n                const numberOfAlluxio = statusCodeAndMsg[2]['alluxio-clusters'].length\n                const newAlluxioList = [];\n                for (let i = 0; i < numberOfAlluxio; i++) {\n                    newAlluxioList.push(statusCodeAndMsg[2]['alluxio-clusters'][i])\n                }\n                // Update the dataset list in Redux store\n                this.props.updateAlluxioList(newAlluxioList);\n            } else {\n                this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1])\n            }\n        })\n    }\n\n    // handleSendRequest is a func that will call sendRequest() and update the panel status\n    handleSendRequest = (httpMethod, dataType, inputData) =>  {\n        // Prep HTTP Request Options\n        let requestOptions = {}\n        try {\n            requestOptions = generateHttpRequestOptions(httpMethod, dataType, inputData)\n        } catch (error){\n            this.props.setAlert(AlertMethod.Warning, 'Unable to Parse Input. ' + error)\n            return\n        }\n\n        // Send Request\n        sendRequest(requestOptions, serverUrl).then(statusCodeAndMsg => {\n            this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1])\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Alluxio\">\n                <h1>Alluxio Controller Panel</h1>\n                <br/>\n                <CreateObject\n                    objectKind={'Alluxio Cluster'}\n                    handleSendRequest={this.handleSendRequest}\n                />\n                <br/>\n                <AlluxioClusters\n                    handleSendRequest={this.handleSendRequest}\n                />\n            </div>\n        );\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AlluxioController);\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,OAAQC,WAAW,KAAO,2BAA2B,CACrD,OACIC,WAAW,CACXC,UAAU,CACVC,0BAA0B,KACvB,cAAc,CACrB,MAAO,CAAAC,eAAe,KAAM,+CAA+C,CAC3E,MAAO,CAAAC,YAAY,KAAM,sBAAsB,CAE/C,OAASC,OAAO,KAAQ,aAAa,CACrC,OAAQC,QAAQ,KAAO,+BAA+B,CACtD,OAAQC,iBAAiB,KAAO,iCAAiC,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAElE,KAAM,CAAAC,eAAe,CAAGC,KAAK,GAAK,CAC9BC,WAAW,CAAED,KAAK,CAACE,KAAK,CAACD,WAAW,CACpCE,YAAY,CAAEH,KAAK,CAACE,KAAK,CAACC,YAAY,CACtCC,WAAW,CAAEJ,KAAK,CAACK,OAAO,CAACD,WAC/B,CAAC,CAAC,CAEF,KAAM,CAAAE,kBAAkB,CAAGC,QAAQ,GAAK,CACpCd,QAAQ,CAAEA,CAACQ,WAAW,CAAEE,YAAY,GAAKI,QAAQ,CAACd,QAAQ,CAACQ,WAAW,CAAEE,YAAY,CAAC,CAAC,CACtFT,iBAAiB,CAAGc,OAAO,EAAKD,QAAQ,CAACb,iBAAiB,CAACc,OAAO,CAAC,CACvE,CAAC,CAAC,CAEF,KAAM,CAAAC,SAAS,CAAG,sBAAsB,CAExC,KAAM,CAAAC,iBAAiB,QAAS,CAAAzB,SAAU,CACtC0B,WAAWA,CAACC,KAAK,CAAE,CACf,KAAK,CAACA,KAAK,CAAC,MAahBC,gBAAgB,CAAG,IAAO,CACtB;AACAzB,UAAU,CAACqB,SAAS,CAAC,CAACK,IAAI,CAACC,gBAAgB,EAAI,CAC3C,GAAIA,gBAAgB,CAAC,CAAC,CAAC,GAAK7B,WAAW,CAAC8B,OAAO,CAAE,CAC7C,KAAM,CAAAC,eAAe,CAAGF,gBAAgB,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAACG,MAAM,CACtE,KAAM,CAAAC,cAAc,CAAG,EAAE,CACzB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGH,eAAe,CAAEG,CAAC,EAAE,CAAE,CACtCD,cAAc,CAACE,IAAI,CAACN,gBAAgB,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAACK,CAAC,CAAC,CAAC,CACnE,CACA;AACA,IAAI,CAACR,KAAK,CAAClB,iBAAiB,CAACyB,cAAc,CAAC,CAChD,CAAC,IAAM,CACH,IAAI,CAACP,KAAK,CAACnB,QAAQ,CAACsB,gBAAgB,CAAC,CAAC,CAAC,CAAEA,gBAAgB,CAAC,CAAC,CAAC,CAAC,CACjE,CACJ,CAAC,CAAC,CACN,CAAC,CAED;AAAA,KACAO,iBAAiB,CAAG,CAACC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,GAAM,CACtD;AACA,GAAI,CAAAC,cAAc,CAAG,CAAC,CAAC,CACvB,GAAI,CACAA,cAAc,CAAGrC,0BAA0B,CAACkC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,CAAC,CAChF,CAAE,MAAOE,KAAK,CAAC,CACX,IAAI,CAACf,KAAK,CAACnB,QAAQ,CAACP,WAAW,CAAC0C,OAAO,CAAE,yBAAyB,CAAGD,KAAK,CAAC,CAC3E,OACJ,CAEA;AACAxC,WAAW,CAACuC,cAAc,CAAEjB,SAAS,CAAC,CAACK,IAAI,CAACC,gBAAgB,EAAI,CAC5D,IAAI,CAACH,KAAK,CAACnB,QAAQ,CAACsB,gBAAgB,CAAC,CAAC,CAAC,CAAEA,gBAAgB,CAAC,CAAC,CAAC,CAAC,CACjE,CAAC,CAAC,CACN,CAAC,CA5CD,CAEAc,iBAAiBA,CAAA,CAAG,CAChB,IAAI,CAACC,QAAQ,CAAGC,WAAW,CAAC,IAAM,CAC9B,IAAI,CAAClB,gBAAgB,CAAC,CAAC,CAC3B,CAAC,CAAE,IAAI,CAAC,CACZ,CAEAmB,oBAAoBA,CAAA,CAAG,CACnBC,aAAa,CAAC,IAAI,CAACH,QAAQ,CAAC,CAChC,CAoCAI,MAAMA,CAAA,CAAG,CACL,mBACIpC,KAAA,QAAKqC,SAAS,CAAC,SAAS,CAAAC,QAAA,eACpBxC,IAAA,OAAAwC,QAAA,CAAI,0BAAwB,CAAI,CAAC,cACjCxC,IAAA,QAAI,CAAC,cACLA,IAAA,CAACL,YAAY,EACT8C,UAAU,CAAE,iBAAkB,CAC9Bf,iBAAiB,CAAE,IAAI,CAACA,iBAAkB,CAC7C,CAAC,cACF1B,IAAA,QAAI,CAAC,cACLA,IAAA,CAACN,eAAe,EACZgC,iBAAiB,CAAE,IAAI,CAACA,iBAAkB,CAC7C,CAAC,EACD,CAAC,CAEd,CACJ,CAGA,cAAe,CAAA9B,OAAO,CAACO,eAAe,CAAEO,kBAAkB,CAAC,CAACI,iBAAiB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}