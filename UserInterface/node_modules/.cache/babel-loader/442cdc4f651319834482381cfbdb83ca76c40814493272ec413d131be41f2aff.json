{"ast":null,"code":"var _jsxFileName = \"/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/components/dataset/ShowDataset.jsx\";\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ShowDataset extends Component {\n  // state = {\n  //     serverUrl: 'http://localhost:5220/dataset',\n  //     isLoaded: false,\n  //     datasetOriginalJSON: JSON,\n  //     hasDataset: false\n  // };\n\n  // componentDidMount() {\n  //     this.checkConnection()\n  //     this.fetchData();\n  // }\n  //\n  // checkConnection() {\n  //     try {\n  //         const response = fetch(this.state.serverUrl)\n  //         console.log(response.then())\n  //\n  //     } catch (error) {\n  //         console.log(error);\n  //     }\n  // }\n\n  // async fetchData() {\n  //     console.log(\"Fetch data\")\n  //     try {\n  //         const response = await fetch(this.state.serverUrl)\n  //         if (!response.ok) {\n  //             throw new Error('Network response was not ok');\n  //         }\n  //\n  //         const result = await response.json();\n  //         const size = result.items.length\n  //         if (size === 0) {\n  //             this.setState({\n  //                 isLoaded: true,\n  //                 hasDataset : false\n  //             });\n  //         } else {\n  //             this.setState({\n  //                 isLoaded: true,\n  //                 datasetOriginalJSON: result.items[0],\n  //                 hasDataset : true\n  //             });\n  //         }\n  //     } catch (error) {\n  //         console.error(error);\n  //     }\n  // }\n\n  // fetchData() {\n  //     console.log(\"Fetch data\")\n  //     try {\n  //         fetch(this.state.serverUrl)\n  //             .then(res => res.json())\n  //             .then(\n  //                 (result) => {\n  //                     this.setState({\n  //                         isLoaded: true,\n  //                         datasetOriginalJSON: result.items[0]\n  //                     });\n  //                 },\n  //                 (error) => {\n  //                     this.setState({\n  //                         isLoaded: false,\n  //                         error\n  //                     });\n  //                 }\n  //             )\n  //     } catch (error) {\n  //         console.error(error);\n  //     }\n  // }\n\n  render() {\n    const {\n      hasDataset,\n      isLoaded,\n      datasetConfigJSON,\n      datasetStatusJSON,\n      datasetOriginalJSON\n    } = this.props.state;\n    if (!hasDataset) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GetDataset\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"There is no Alive Dataset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 20\n      }, this);\n    } else if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GetDataset\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GetDataset\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"DS Name\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Data Set Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), datasetConfigJSON.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"DS Path\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Data Set Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this), datasetConfigJSON.path]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"DS Status\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Data Set Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"DS JSON\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Original JSON:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            children: JSON.stringify(datasetOriginalJSON, null, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this);\n    }\n  }\n}\nexport default ShowDataset;","map":{"version":3,"names":["Component","jsxDEV","_jsxDEV","ShowDataset","render","hasDataset","isLoaded","datasetConfigJSON","datasetStatusJSON","datasetOriginalJSON","props","state","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","path","JSON","stringify"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/components/dataset/ShowDataset.jsx"],"sourcesContent":["import { Component } from 'react';\n\n\nclass ShowDataset extends Component {\n    // state = {\n    //     serverUrl: 'http://localhost:5220/dataset',\n    //     isLoaded: false,\n    //     datasetOriginalJSON: JSON,\n    //     hasDataset: false\n    // };\n\n    // componentDidMount() {\n    //     this.checkConnection()\n    //     this.fetchData();\n    // }\n    //\n    // checkConnection() {\n    //     try {\n    //         const response = fetch(this.state.serverUrl)\n    //         console.log(response.then())\n    //\n    //     } catch (error) {\n    //         console.log(error);\n    //     }\n    // }\n\n    // async fetchData() {\n    //     console.log(\"Fetch data\")\n    //     try {\n    //         const response = await fetch(this.state.serverUrl)\n    //         if (!response.ok) {\n    //             throw new Error('Network response was not ok');\n    //         }\n    //\n    //         const result = await response.json();\n    //         const size = result.items.length\n    //         if (size === 0) {\n    //             this.setState({\n    //                 isLoaded: true,\n    //                 hasDataset : false\n    //             });\n    //         } else {\n    //             this.setState({\n    //                 isLoaded: true,\n    //                 datasetOriginalJSON: result.items[0],\n    //                 hasDataset : true\n    //             });\n    //         }\n    //     } catch (error) {\n    //         console.error(error);\n    //     }\n    // }\n\n    // fetchData() {\n    //     console.log(\"Fetch data\")\n    //     try {\n    //         fetch(this.state.serverUrl)\n    //             .then(res => res.json())\n    //             .then(\n    //                 (result) => {\n    //                     this.setState({\n    //                         isLoaded: true,\n    //                         datasetOriginalJSON: result.items[0]\n    //                     });\n    //                 },\n    //                 (error) => {\n    //                     this.setState({\n    //                         isLoaded: false,\n    //                         error\n    //                     });\n    //                 }\n    //             )\n    //     } catch (error) {\n    //         console.error(error);\n    //     }\n    // }\n\n    render() {\n        const {hasDataset, isLoaded, datasetConfigJSON, datasetStatusJSON, datasetOriginalJSON} = this.props.state;\n\n        if (!hasDataset) {\n            return <div className=\"GetDataset\">\n                <h2>\n                    There is no Alive Dataset\n                </h2>\n            </div>;\n        } else if (!isLoaded) {\n            return <div className=\"GetDataset\">Loading...</div>;\n        } else {\n            return (\n                <div className=\"GetDataset\">\n\n                    <div className='DS Name'>\n                        <h3>Data Set Name:</h3>\n                        {datasetConfigJSON.name}\n                    </div>\n\n                    <div className='DS Path'>\n                        <h3>Data Set Status:</h3>\n                        {datasetConfigJSON.path}\n                    </div>\n\n                    <div className='DS Status'>\n                        <h3>Data Set Status:</h3>\n                        {/*<h4>boundedAlluxioCluster: </h4>*/}\n                        {/*{dataset.status?.get('boundedAlluxioCluster')}*/}\n                        {/*<h4>phase: </h4>*/}\n                        {/*{dataset.status?.get('phase')}*/}\n                    </div>\n\n                    <div className='DS JSON'>\n                        <h3>Original JSON:</h3>\n                        <pre>{JSON.stringify(datasetOriginalJSON, null, 2)}</pre>\n                    </div>\n\n                </div>\n            );\n        }\n    }\n}\n\nexport default ShowDataset\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}