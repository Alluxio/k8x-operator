{"ast":null,"code":"import{AlertMethod}from\"../components/alert/Alert\";import YAML from'yaml';import yaml from'js-yaml';export const DataType={JSONString:1,JSONObject:2,YAMLString:3,YAMLObject:4};// modalStyle contains styling for all modals.\nexport const modalStyle={position:'absolute',top:'50%',left:'50%',transform:'translate(-50%, -50%)',width:'75%',height:'80%',bgcolor:'background.paper',border:'1px solid #000',p:4};export const FetchHeaders={'Content-Type':'application/json'};/**\n * Use method in requestOptions to communicate with api server.\n *\n * @param requestOptions contains http method. headers and body.\n * @param {string} serverUrl is a relative or points to your development server.\n * @function sendRequest\n * @returns [AlertMethod, AlertMessage]\n */export async function sendRequest(requestOptions,serverUrl){// POST request using fetch with async/await\ntry{const response=await fetch(serverUrl,requestOptions);if(!response.ok){return[AlertMethod.Error,'The Operator API returns not OK Response.'];}const data=response.status;console.log(response);console.log(JSON.stringify(data));return[AlertMethod.Success,'Success!'];}catch(error){console.log(error);return[AlertMethod.Error,error.toString()];}}/**\n * Use GET method to get data\n *\n * @param {string} serverUrl is a relative or points to your development server.\n * @function getRequest\n * @returns [AlertMethod, AlertMessage, Result in JSON Object(Optional)]\n */export async function getRequest(serverUrl){try{const response=await fetch(serverUrl);if(!response.ok){return[AlertMethod.Error,'The Operator API returns not OK Response.'];}const result=await response.json();return[AlertMethod.Success,'Success!',result];}catch(error){console.log(error);return[AlertMethod.Error,error.toString()];}}/**\n * Check the input str is JSON or not\n *\n * @param {string} str is a JSON string\n * @function isJSONString\n * @returns {boolean} bool\n */export function isJSONString(str){try{JSON.parse(str);}catch(e){return false;}return true;}/**\n * Convert YAML String to JSON String\n *\n * @param {string} yamlStr is a YAML string\n * @function YAMLtoJSON\n * @returns {string} jsonStr\n */export function YAMLtoJSON(yamlStr){const obj=YAML.parse(yamlStr);return JSON.stringify(obj);}/**\n * Convert JSON String to YAML String\n *\n * @param {JSON} jsonObj is a YAML string\n * @function JSONtoStringifyYAML\n * @returns {string} yamlStr\n */export function JSONtoStringifyYAML(jsonObj){return YAML.stringify(jsonObj);}export function convertInputToStringifyJSON(dataType,inputData){if(dataType===DataType.YAMLString){const parsedYaml=yaml.load(inputData);return JSON.stringify(parsedYaml,null,2);}if(dataType===DataType.JSONString){const parsedJSON=JSON.parse(inputData);return JSON.stringify(parsedJSON);}if(dataType===DataType.YAMLObject){return JSON.stringify(inputData);}if(dataType===DataType.JSONObject){return JSON.stringify(inputData);}return JSON.stringify(JSON);}","map":{"version":3,"names":["AlertMethod","YAML","yaml","DataType","JSONString","JSONObject","YAMLString","YAMLObject","modalStyle","position","top","left","transform","width","height","bgcolor","border","p","FetchHeaders","sendRequest","requestOptions","serverUrl","response","fetch","ok","Error","data","status","console","log","JSON","stringify","Success","error","toString","getRequest","result","json","isJSONString","str","parse","e","YAMLtoJSON","yamlStr","obj","JSONtoStringifyYAML","jsonObj","convertInputToStringifyJSON","dataType","inputData","parsedYaml","load","parsedJSON"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/util/util.jsx"],"sourcesContent":["import {AlertMethod} from \"../components/alert/Alert\";\nimport YAML from 'yaml'\nimport yaml from 'js-yaml'\n\nexport const DataType =  {\n    JSONString: 1,\n    JSONObject: 2,\n    YAMLString: 3,\n    YAMLObject: 4,\n}\n\n// modalStyle contains styling for all modals.\nexport const modalStyle = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '75%',\n    height: '80%',\n    bgcolor: 'background.paper',\n    border: '1px solid #000',\n    p: 4,\n};\n\n\nexport const FetchHeaders = {'Content-Type':'application/json'}\n\n/**\n * Use method in requestOptions to communicate with api server.\n *\n * @param requestOptions contains http method. headers and body.\n * @param {string} serverUrl is a relative or points to your development server.\n * @function sendRequest\n * @returns [AlertMethod, AlertMessage]\n */\nexport async function sendRequest(requestOptions, serverUrl) {\n    // POST request using fetch with async/await\n    try {\n        const response = await fetch(serverUrl, requestOptions);\n        if (!response.ok) {\n            return [AlertMethod.Error, 'The Operator API returns not OK Response.'];\n        }\n\n        const data = response.status;\n        console.log(response);\n        console.log(JSON.stringify(data));\n        return [AlertMethod.Success, 'Success!'];\n    } catch (error) {\n        console.log(error);\n        return [AlertMethod.Error, error.toString()];\n    }\n}\n\n\n/**\n * Use GET method to get data\n *\n * @param {string} serverUrl is a relative or points to your development server.\n * @function getRequest\n * @returns [AlertMethod, AlertMessage, Result in JSON Object(Optional)]\n */\nexport async function getRequest(serverUrl){\n    try {\n        const response = await fetch(serverUrl);\n        if (!response.ok) {\n            return [AlertMethod.Error, 'The Operator API returns not OK Response.'];\n        }\n        const result = await response.json();\n        return [AlertMethod.Success, 'Success!', result];\n    } catch (error) {\n        console.log(error);\n        return [AlertMethod.Error, error.toString()];\n    }\n}\n\n/**\n * Check the input str is JSON or not\n *\n * @param {string} str is a JSON string\n * @function isJSONString\n * @returns {boolean} bool\n */\nexport function isJSONString(str) {\n    try {JSON.parse(str)}\n    catch (e) { return false}\n    return true;\n}\n\n/**\n * Convert YAML String to JSON String\n *\n * @param {string} yamlStr is a YAML string\n * @function YAMLtoJSON\n * @returns {string} jsonStr\n */\nexport function YAMLtoJSON(yamlStr) {\n    const obj = YAML.parse(yamlStr);\n    return JSON.stringify(obj);\n}\n\n/**\n * Convert JSON String to YAML String\n *\n * @param {JSON} jsonObj is a YAML string\n * @function JSONtoStringifyYAML\n * @returns {string} yamlStr\n */\nexport function JSONtoStringifyYAML(jsonObj) {\n    return YAML.stringify(jsonObj);\n}\n\nexport function convertInputToStringifyJSON(dataType, inputData) {\n    if (dataType === DataType.YAMLString) {\n        const parsedYaml = yaml.load(inputData);\n        return JSON.stringify(parsedYaml, null, 2);\n    }\n\n    if (dataType === DataType.JSONString) {\n        const parsedJSON = JSON.parse(inputData);\n        return JSON.stringify(parsedJSON);\n    }\n\n    if (dataType === DataType.YAMLObject) {\n        return JSON.stringify(inputData)\n    }\n    if (dataType === DataType.JSONObject) {\n        return JSON.stringify(inputData)\n    }\n\n    return JSON.stringify(JSON)\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}