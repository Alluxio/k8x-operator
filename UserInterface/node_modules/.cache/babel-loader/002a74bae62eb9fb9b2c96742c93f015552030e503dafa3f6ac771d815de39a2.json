{"ast":null,"code":"import{AlertMethod}from\"../components/alert/Alert\";import yaml from'js-yaml';export const DataType={JSONString:1,JSONObject:2,YAMLString:3,YAMLObject:4};// modalStyle contains styling for all modals.\nexport const modalStyle={position:'absolute',top:'50%',left:'50%',transform:'translate(-50%, -50%)',width:'75%',height:'80%',bgcolor:'background.paper',border:'1px solid #000',borderRadius:' 10px',p:4};export const FetchHeaders={'Content-Type':'application/json'};/**\n * Use HTTP method in requestOptions to communicate with api server.\n *\n * @param requestOptions contains http method. headers and body.\n * @param {string} serverUrl is a relative or points to your development server.\n * @function sendRequest\n * @returns [AlertMethod, AlertMessage]\n */export async function sendRequest(requestOptions,serverUrl){try{const response=await fetch(serverUrl,requestOptions);if(!response.ok){try{const errorBody=await response.json();const errorMessage=\"\".concat(errorBody.title,\": \").concat(errorBody.details);return[AlertMethod.Error,errorMessage];}catch(jsonError){return[AlertMethod.Error,'An error occurred, but the error message from API-Server could not be parsed.'];}}return[AlertMethod.Success,'Success!'];}catch(error){return[AlertMethod.Error,error.toString()];}}/**\n * Use GET method to get data\n *\n * @param {string} serverUrl is a relative or points to your development server.\n * @function getRequest\n * @returns [AlertMethod, AlertMessage, Result in JSON Object(Optional)]\n */export async function getRequest(serverUrl){try{const response=await fetch(serverUrl);if(!response.ok){try{const errorBody=await response.json();const errorMessage=\"\".concat(errorBody.title,\": \").concat(errorBody.details);return[AlertMethod.Error,errorMessage];}catch(jsonError){return[AlertMethod.Error,'An error occurred, but the error message from API-Server could not be parsed.'];}}const result=await response.json();return[AlertMethod.Success,'Success!',result];}catch(error){console.log(error);return[AlertMethod.Error,error.toString()];}}/**\n * Convert YAML String to JSON String\n *\n * @param {string} yamlStr is a YAML string\n * @function YAMLtoJSON\n * @returns {string} jsonStr\n */export function YAMLtoJSON(yamlStr){const obj=yaml.load(yamlStr);return JSON.stringify(obj);}/**\n * Convert JSON String to YAML String\n *\n * @param {JSON} jsonObj is a YAML string\n * @function JSONtoStringifyYAML\n * @returns {string} yamlStr\n */export function JSONtoStringifyYAML(jsonObj){return yaml.dump(jsonObj);}/**\n * Convert Input to StringifyJSON\n *\n * @param dataType is defined in DataType\n * @param inputData can be type that specified in dataType\n * @function convertToStringifyJSON\n * @returns {string} jsonStr\n */export function convertToStringifyJSON(dataType,inputData){if(dataType===DataType.YAMLString){const parsedYaml=yaml.load(inputData);return JSON.stringify(parsedYaml,null,2);}if(dataType===DataType.JSONString){const parsedJSON=JSON.parse(inputData);return JSON.stringify(parsedJSON);}if(dataType===DataType.YAMLObject){return JSON.stringify(inputData);}if(dataType===DataType.JSONObject){return JSON.stringify(inputData);}return JSON.stringify(JSON);}/**\n * Generate HTTP Request Body for Fetch()\n *\n * @param httpMethod\n * @param dataType\n * @param inputData\n * @function generateHttpRequestOptions\n * @returns  requestOptions\n */export function generateHttpRequestOptions(httpMethod,dataType,inputData){return{method:httpMethod,headers:FetchHeaders,body:convertToStringifyJSON(dataType,inputData)};}","map":{"version":3,"names":["AlertMethod","yaml","DataType","JSONString","JSONObject","YAMLString","YAMLObject","modalStyle","position","top","left","transform","width","height","bgcolor","border","borderRadius","p","FetchHeaders","sendRequest","requestOptions","serverUrl","response","fetch","ok","errorBody","json","errorMessage","concat","title","details","Error","jsonError","Success","error","toString","getRequest","result","console","log","YAMLtoJSON","yamlStr","obj","load","JSON","stringify","JSONtoStringifyYAML","jsonObj","dump","convertToStringifyJSON","dataType","inputData","parsedYaml","parsedJSON","parse","generateHttpRequestOptions","httpMethod","method","headers","body"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/util/util.jsx"],"sourcesContent":["import {AlertMethod} from \"../components/alert/Alert\";\nimport yaml from 'js-yaml'\n\nexport const DataType =  {\n    JSONString: 1,\n    JSONObject: 2,\n    YAMLString: 3,\n    YAMLObject: 4,\n}\n\n// modalStyle contains styling for all modals.\nexport const modalStyle = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '75%',\n    height: '80%',\n    bgcolor: 'background.paper',\n    border: '1px solid #000',\n    borderRadius: ' 10px',\n    p: 4,\n};\n\n\nexport const FetchHeaders = {'Content-Type':'application/json'}\n\n/**\n * Use HTTP method in requestOptions to communicate with api server.\n *\n * @param requestOptions contains http method. headers and body.\n * @param {string} serverUrl is a relative or points to your development server.\n * @function sendRequest\n * @returns [AlertMethod, AlertMessage]\n */\nexport async function sendRequest(requestOptions, serverUrl) {\n    try {\n        const response = await fetch(serverUrl, requestOptions);\n        if (!response.ok) {\n            try {\n                const errorBody = await response.json();\n                const errorMessage = `${errorBody.title}: ${errorBody.details}`;\n                return [AlertMethod.Error, errorMessage];\n            } catch (jsonError) {\n                return [AlertMethod.Error, 'An error occurred, but the error message from API-Server could not be parsed.'];\n            }\n        }\n        return [AlertMethod.Success, 'Success!'];\n    } catch (error) {\n        return [AlertMethod.Error, error.toString()];\n    }\n}\n\n\n/**\n * Use GET method to get data\n *\n * @param {string} serverUrl is a relative or points to your development server.\n * @function getRequest\n * @returns [AlertMethod, AlertMessage, Result in JSON Object(Optional)]\n */\nexport async function getRequest(serverUrl){\n    try {\n        const response = await fetch(serverUrl);\n\n        if (!response.ok) {\n            try {\n                const errorBody = await response.json();\n                const errorMessage = `${errorBody.title}: ${errorBody.details}`;\n                return [AlertMethod.Error, errorMessage];\n            } catch (jsonError) {\n                return [AlertMethod.Error, 'An error occurred, but the error message from API-Server could not be parsed.'];\n            }\n        }\n\n        const result = await response.json();\n        return [AlertMethod.Success, 'Success!', result];\n    } catch (error) {\n        console.log(error);\n        return [AlertMethod.Error, error.toString()];\n    }\n}\n\n/**\n * Convert YAML String to JSON String\n *\n * @param {string} yamlStr is a YAML string\n * @function YAMLtoJSON\n * @returns {string} jsonStr\n */\nexport function YAMLtoJSON(yamlStr) {\n    const obj = yaml.load(yamlStr);\n    return JSON.stringify(obj);\n}\n\n/**\n * Convert JSON String to YAML String\n *\n * @param {JSON} jsonObj is a YAML string\n * @function JSONtoStringifyYAML\n * @returns {string} yamlStr\n */\nexport function JSONtoStringifyYAML(jsonObj) {\n    return yaml.dump(jsonObj)\n}\n\n\n/**\n * Convert Input to StringifyJSON\n *\n * @param dataType is defined in DataType\n * @param inputData can be type that specified in dataType\n * @function convertToStringifyJSON\n * @returns {string} jsonStr\n */\nexport function convertToStringifyJSON(dataType, inputData) {\n    if (dataType === DataType.YAMLString) {\n        const parsedYaml = yaml.load(inputData);\n        return JSON.stringify(parsedYaml, null, 2);\n    }\n\n    if (dataType === DataType.JSONString) {\n        const parsedJSON = JSON.parse(inputData);\n        return JSON.stringify(parsedJSON);\n    }\n\n    if (dataType === DataType.YAMLObject) {\n        return JSON.stringify(inputData)\n    }\n    if (dataType === DataType.JSONObject) {\n        return JSON.stringify(inputData)\n    }\n\n    return JSON.stringify(JSON)\n}\n\n\n/**\n * Generate HTTP Request Body for Fetch()\n *\n * @param httpMethod\n * @param dataType\n * @param inputData\n * @function generateHttpRequestOptions\n * @returns  requestOptions\n */\nexport function generateHttpRequestOptions(httpMethod, dataType, inputData) {\n    return {\n        method: httpMethod,\n        headers: FetchHeaders,\n        body: convertToStringifyJSON(dataType, inputData),\n    }\n}\n\n"],"mappings":"AAAA,OAAQA,WAAW,KAAO,2BAA2B,CACrD,MAAO,CAAAC,IAAI,KAAM,SAAS,CAE1B,MAAO,MAAM,CAAAC,QAAQ,CAAI,CACrBC,UAAU,CAAE,CAAC,CACbC,UAAU,CAAE,CAAC,CACbC,UAAU,CAAE,CAAC,CACbC,UAAU,CAAE,CAChB,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,UAAU,CAAG,CACtBC,QAAQ,CAAE,UAAU,CACpBC,GAAG,CAAE,KAAK,CACVC,IAAI,CAAE,KAAK,CACXC,SAAS,CAAE,uBAAuB,CAClCC,KAAK,CAAE,KAAK,CACZC,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,kBAAkB,CAC3BC,MAAM,CAAE,gBAAgB,CACxBC,YAAY,CAAE,OAAO,CACrBC,CAAC,CAAE,CACP,CAAC,CAGD,MAAO,MAAM,CAAAC,YAAY,CAAG,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,eAAe,CAAAC,WAAWA,CAACC,cAAc,CAAEC,SAAS,CAAE,CACzD,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACF,SAAS,CAAED,cAAc,CAAC,CACvD,GAAI,CAACE,QAAQ,CAACE,EAAE,CAAE,CACd,GAAI,CACA,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CACvC,KAAM,CAAAC,YAAY,IAAAC,MAAA,CAAMH,SAAS,CAACI,KAAK,OAAAD,MAAA,CAAKH,SAAS,CAACK,OAAO,CAAE,CAC/D,MAAO,CAAC9B,WAAW,CAAC+B,KAAK,CAAEJ,YAAY,CAAC,CAC5C,CAAE,MAAOK,SAAS,CAAE,CAChB,MAAO,CAAChC,WAAW,CAAC+B,KAAK,CAAE,+EAA+E,CAAC,CAC/G,CACJ,CACA,MAAO,CAAC/B,WAAW,CAACiC,OAAO,CAAE,UAAU,CAAC,CAC5C,CAAE,MAAOC,KAAK,CAAE,CACZ,MAAO,CAAClC,WAAW,CAAC+B,KAAK,CAAEG,KAAK,CAACC,QAAQ,CAAC,CAAC,CAAC,CAChD,CACJ,CAGA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,eAAe,CAAAC,UAAUA,CAACf,SAAS,CAAC,CACvC,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACF,SAAS,CAAC,CAEvC,GAAI,CAACC,QAAQ,CAACE,EAAE,CAAE,CACd,GAAI,CACA,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CACvC,KAAM,CAAAC,YAAY,IAAAC,MAAA,CAAMH,SAAS,CAACI,KAAK,OAAAD,MAAA,CAAKH,SAAS,CAACK,OAAO,CAAE,CAC/D,MAAO,CAAC9B,WAAW,CAAC+B,KAAK,CAAEJ,YAAY,CAAC,CAC5C,CAAE,MAAOK,SAAS,CAAE,CAChB,MAAO,CAAChC,WAAW,CAAC+B,KAAK,CAAE,+EAA+E,CAAC,CAC/G,CACJ,CAEA,KAAM,CAAAM,MAAM,CAAG,KAAM,CAAAf,QAAQ,CAACI,IAAI,CAAC,CAAC,CACpC,MAAO,CAAC1B,WAAW,CAACiC,OAAO,CAAE,UAAU,CAAEI,MAAM,CAAC,CACpD,CAAE,MAAOH,KAAK,CAAE,CACZI,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC,CAClB,MAAO,CAAClC,WAAW,CAAC+B,KAAK,CAAEG,KAAK,CAACC,QAAQ,CAAC,CAAC,CAAC,CAChD,CACJ,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAK,UAAUA,CAACC,OAAO,CAAE,CAChC,KAAM,CAAAC,GAAG,CAAGzC,IAAI,CAAC0C,IAAI,CAACF,OAAO,CAAC,CAC9B,MAAO,CAAAG,IAAI,CAACC,SAAS,CAACH,GAAG,CAAC,CAC9B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAI,mBAAmBA,CAACC,OAAO,CAAE,CACzC,MAAO,CAAA9C,IAAI,CAAC+C,IAAI,CAACD,OAAO,CAAC,CAC7B,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAE,sBAAsBA,CAACC,QAAQ,CAAEC,SAAS,CAAE,CACxD,GAAID,QAAQ,GAAKhD,QAAQ,CAACG,UAAU,CAAE,CAClC,KAAM,CAAA+C,UAAU,CAAGnD,IAAI,CAAC0C,IAAI,CAACQ,SAAS,CAAC,CACvC,MAAO,CAAAP,IAAI,CAACC,SAAS,CAACO,UAAU,CAAE,IAAI,CAAE,CAAC,CAAC,CAC9C,CAEA,GAAIF,QAAQ,GAAKhD,QAAQ,CAACC,UAAU,CAAE,CAClC,KAAM,CAAAkD,UAAU,CAAGT,IAAI,CAACU,KAAK,CAACH,SAAS,CAAC,CACxC,MAAO,CAAAP,IAAI,CAACC,SAAS,CAACQ,UAAU,CAAC,CACrC,CAEA,GAAIH,QAAQ,GAAKhD,QAAQ,CAACI,UAAU,CAAE,CAClC,MAAO,CAAAsC,IAAI,CAACC,SAAS,CAACM,SAAS,CAAC,CACpC,CACA,GAAID,QAAQ,GAAKhD,QAAQ,CAACE,UAAU,CAAE,CAClC,MAAO,CAAAwC,IAAI,CAACC,SAAS,CAACM,SAAS,CAAC,CACpC,CAEA,MAAO,CAAAP,IAAI,CAACC,SAAS,CAACD,IAAI,CAAC,CAC/B,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAW,0BAA0BA,CAACC,UAAU,CAAEN,QAAQ,CAAEC,SAAS,CAAE,CACxE,MAAO,CACHM,MAAM,CAAED,UAAU,CAClBE,OAAO,CAAExC,YAAY,CACrByC,IAAI,CAAEV,sBAAsB,CAACC,QAAQ,CAAEC,SAAS,CACpD,CAAC,CACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}