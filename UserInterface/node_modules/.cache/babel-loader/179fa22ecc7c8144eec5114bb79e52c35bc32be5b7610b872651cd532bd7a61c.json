{"ast":null,"code":"import { stringifyNumber } from '../../stringify/stringifyNumber.js';\nconst intIdentify = value => typeof value === 'bigint' || Number.isInteger(value);\nconst intResolve = (str, offset, radix, _ref) => {\n  let {\n    intAsBigInt\n  } = _ref;\n  return intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix);\n};\nfunction intStringify(node, radix, prefix) {\n  const {\n    value\n  } = node;\n  if (intIdentify(value) && value >= 0) return prefix + value.toString(radix);\n  return stringifyNumber(node);\n}\nconst intOct = {\n  identify: value => intIdentify(value) && value >= 0,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'OCT',\n  test: /^0o[0-7]+$/,\n  resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),\n  stringify: node => intStringify(node, 8, '0o')\n};\nconst int = {\n  identify: intIdentify,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  test: /^[-+]?[0-9]+$/,\n  resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\n  stringify: stringifyNumber\n};\nconst intHex = {\n  identify: value => intIdentify(value) && value >= 0,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'HEX',\n  test: /^0x[0-9a-fA-F]+$/,\n  resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n  stringify: node => intStringify(node, 16, '0x')\n};\nexport { int, intHex, intOct };","map":{"version":3,"names":["stringifyNumber","intIdentify","value","Number","isInteger","intResolve","str","offset","radix","_ref","intAsBigInt","BigInt","parseInt","substring","intStringify","node","prefix","toString","intOct","identify","default","tag","format","test","resolve","_onError","opt","stringify","int","intHex"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/node_modules/yaml/browser/dist/schema/core/int.js"],"sourcesContent":["import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\nconst intResolve = (str, offset, radix, { intAsBigInt }) => (intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix));\nfunction intStringify(node, radix, prefix) {\n    const { value } = node;\n    if (intIdentify(value) && value >= 0)\n        return prefix + value.toString(radix);\n    return stringifyNumber(node);\n}\nconst intOct = {\n    identify: value => intIdentify(value) && value >= 0,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'OCT',\n    test: /^0o[0-7]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),\n    stringify: node => intStringify(node, 8, '0o')\n};\nconst int = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    test: /^[-+]?[0-9]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\n    stringify: stringifyNumber\n};\nconst intHex = {\n    identify: value => intIdentify(value) && value >= 0,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'HEX',\n    test: /^0x[0-9a-fA-F]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nexport { int, intHex, intOct };\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,oCAAoC;AAEpE,MAAMC,WAAW,GAAIC,KAAK,IAAK,OAAOA,KAAK,KAAK,QAAQ,IAAIC,MAAM,CAACC,SAAS,CAACF,KAAK,CAAC;AACnF,MAAMG,UAAU,GAAGA,CAACC,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAAC,IAAA;EAAA,IAAE;IAAEC;EAAY,CAAC,GAAAD,IAAA;EAAA,OAAMC,WAAW,GAAGC,MAAM,CAACL,GAAG,CAAC,GAAGM,QAAQ,CAACN,GAAG,CAACO,SAAS,CAACN,MAAM,CAAC,EAAEC,KAAK,CAAC;AAAA,CAAC;AAChI,SAASM,YAAYA,CAACC,IAAI,EAAEP,KAAK,EAAEQ,MAAM,EAAE;EACvC,MAAM;IAAEd;EAAM,CAAC,GAAGa,IAAI;EACtB,IAAId,WAAW,CAACC,KAAK,CAAC,IAAIA,KAAK,IAAI,CAAC,EAChC,OAAOc,MAAM,GAAGd,KAAK,CAACe,QAAQ,CAACT,KAAK,CAAC;EACzC,OAAOR,eAAe,CAACe,IAAI,CAAC;AAChC;AACA,MAAMG,MAAM,GAAG;EACXC,QAAQ,EAAEjB,KAAK,IAAID,WAAW,CAACC,KAAK,CAAC,IAAIA,KAAK,IAAI,CAAC;EACnDkB,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,uBAAuB;EAC5BC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,YAAY;EAClBC,OAAO,EAAEA,CAAClB,GAAG,EAAEmB,QAAQ,EAAEC,GAAG,KAAKrB,UAAU,CAACC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEoB,GAAG,CAAC;EAC3DC,SAAS,EAAEZ,IAAI,IAAID,YAAY,CAACC,IAAI,EAAE,CAAC,EAAE,IAAI;AACjD,CAAC;AACD,MAAMa,GAAG,GAAG;EACRT,QAAQ,EAAElB,WAAW;EACrBmB,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,uBAAuB;EAC5BE,IAAI,EAAE,eAAe;EACrBC,OAAO,EAAEA,CAAClB,GAAG,EAAEmB,QAAQ,EAAEC,GAAG,KAAKrB,UAAU,CAACC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAEoB,GAAG,CAAC;EAC5DC,SAAS,EAAE3B;AACf,CAAC;AACD,MAAM6B,MAAM,GAAG;EACXV,QAAQ,EAAEjB,KAAK,IAAID,WAAW,CAACC,KAAK,CAAC,IAAIA,KAAK,IAAI,CAAC;EACnDkB,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,uBAAuB;EAC5BC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,kBAAkB;EACxBC,OAAO,EAAEA,CAAClB,GAAG,EAAEmB,QAAQ,EAAEC,GAAG,KAAKrB,UAAU,CAACC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAEoB,GAAG,CAAC;EAC5DC,SAAS,EAAEZ,IAAI,IAAID,YAAY,CAACC,IAAI,EAAE,EAAE,EAAE,IAAI;AAClD,CAAC;AAED,SAASa,GAAG,EAAEC,MAAM,EAAEX,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}