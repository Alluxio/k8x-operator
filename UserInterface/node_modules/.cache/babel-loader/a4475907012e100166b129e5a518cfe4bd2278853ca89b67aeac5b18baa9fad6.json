{"ast":null,"code":"import { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveProps } from './resolve-props.js';\nimport { flowIndentCheck } from './util-flow-indent-check.js';\nfunction resolveBlockSeq(_ref, ctx, bs, onError, tag) {\n  var _tag$nodeClass, _commentEnd;\n  let {\n    composeNode,\n    composeEmptyNode\n  } = _ref;\n  const NodeClass = (_tag$nodeClass = tag === null || tag === void 0 ? void 0 : tag.nodeClass) !== null && _tag$nodeClass !== void 0 ? _tag$nodeClass : YAMLSeq;\n  const seq = new NodeClass(ctx.schema);\n  if (ctx.atRoot) ctx.atRoot = false;\n  let offset = bs.offset;\n  let commentEnd = null;\n  for (const {\n    start,\n    value\n  } of bs.items) {\n    const props = resolveProps(start, {\n      indicator: 'seq-item-ind',\n      next: value,\n      offset,\n      onError,\n      startOnNewline: true\n    });\n    if (!props.found) {\n      if (props.anchor || props.tag || value) {\n        if (value && value.type === 'block-seq') onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');else onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');\n      } else {\n        commentEnd = props.end;\n        if (props.comment) seq.comment = props.comment;\n        continue;\n      }\n    }\n    const node = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, start, null, props, onError);\n    if (ctx.schema.compat) flowIndentCheck(bs.indent, value, onError);\n    offset = node.range[2];\n    seq.items.push(node);\n  }\n  seq.range = [bs.offset, offset, (_commentEnd = commentEnd) !== null && _commentEnd !== void 0 ? _commentEnd : offset];\n  return seq;\n}\nexport { resolveBlockSeq };","map":{"version":3,"names":["YAMLSeq","resolveProps","flowIndentCheck","resolveBlockSeq","_ref","ctx","bs","onError","tag","_tag$nodeClass","_commentEnd","composeNode","composeEmptyNode","NodeClass","nodeClass","seq","schema","atRoot","offset","commentEnd","start","value","items","props","indicator","next","startOnNewline","found","anchor","type","end","comment","node","compat","indent","range","push"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/node_modules/yaml/browser/dist/compose/resolve-block-seq.js"],"sourcesContent":["import { YAMLSeq } from '../nodes/YAMLSeq.js';\nimport { resolveProps } from './resolve-props.js';\nimport { flowIndentCheck } from './util-flow-indent-check.js';\n\nfunction resolveBlockSeq({ composeNode, composeEmptyNode }, ctx, bs, onError, tag) {\n    const NodeClass = tag?.nodeClass ?? YAMLSeq;\n    const seq = new NodeClass(ctx.schema);\n    if (ctx.atRoot)\n        ctx.atRoot = false;\n    let offset = bs.offset;\n    let commentEnd = null;\n    for (const { start, value } of bs.items) {\n        const props = resolveProps(start, {\n            indicator: 'seq-item-ind',\n            next: value,\n            offset,\n            onError,\n            startOnNewline: true\n        });\n        if (!props.found) {\n            if (props.anchor || props.tag || value) {\n                if (value && value.type === 'block-seq')\n                    onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');\n                else\n                    onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');\n            }\n            else {\n                commentEnd = props.end;\n                if (props.comment)\n                    seq.comment = props.comment;\n                continue;\n            }\n        }\n        const node = value\n            ? composeNode(ctx, value, props, onError)\n            : composeEmptyNode(ctx, props.end, start, null, props, onError);\n        if (ctx.schema.compat)\n            flowIndentCheck(bs.indent, value, onError);\n        offset = node.range[2];\n        seq.items.push(node);\n    }\n    seq.range = [bs.offset, offset, commentEnd ?? offset];\n    return seq;\n}\n\nexport { resolveBlockSeq };\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,eAAe,QAAQ,6BAA6B;AAE7D,SAASC,eAAeA,CAAAC,IAAA,EAAoCC,GAAG,EAAEC,EAAE,EAAEC,OAAO,EAAEC,GAAG,EAAE;EAAA,IAAAC,cAAA,EAAAC,WAAA;EAAA,IAA1D;IAAEC,WAAW;IAAEC;EAAiB,CAAC,GAAAR,IAAA;EACtD,MAAMS,SAAS,IAAAJ,cAAA,GAAGD,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEM,SAAS,cAAAL,cAAA,cAAAA,cAAA,GAAIT,OAAO;EAC3C,MAAMe,GAAG,GAAG,IAAIF,SAAS,CAACR,GAAG,CAACW,MAAM,CAAC;EACrC,IAAIX,GAAG,CAACY,MAAM,EACVZ,GAAG,CAACY,MAAM,GAAG,KAAK;EACtB,IAAIC,MAAM,GAAGZ,EAAE,CAACY,MAAM;EACtB,IAAIC,UAAU,GAAG,IAAI;EACrB,KAAK,MAAM;IAAEC,KAAK;IAAEC;EAAM,CAAC,IAAIf,EAAE,CAACgB,KAAK,EAAE;IACrC,MAAMC,KAAK,GAAGtB,YAAY,CAACmB,KAAK,EAAE;MAC9BI,SAAS,EAAE,cAAc;MACzBC,IAAI,EAAEJ,KAAK;MACXH,MAAM;MACNX,OAAO;MACPmB,cAAc,EAAE;IACpB,CAAC,CAAC;IACF,IAAI,CAACH,KAAK,CAACI,KAAK,EAAE;MACd,IAAIJ,KAAK,CAACK,MAAM,IAAIL,KAAK,CAACf,GAAG,IAAIa,KAAK,EAAE;QACpC,IAAIA,KAAK,IAAIA,KAAK,CAACQ,IAAI,KAAK,WAAW,EACnCtB,OAAO,CAACgB,KAAK,CAACO,GAAG,EAAE,YAAY,EAAE,kDAAkD,CAAC,CAAC,KAErFvB,OAAO,CAACW,MAAM,EAAE,cAAc,EAAE,mCAAmC,CAAC;MAC5E,CAAC,MACI;QACDC,UAAU,GAAGI,KAAK,CAACO,GAAG;QACtB,IAAIP,KAAK,CAACQ,OAAO,EACbhB,GAAG,CAACgB,OAAO,GAAGR,KAAK,CAACQ,OAAO;QAC/B;MACJ;IACJ;IACA,MAAMC,IAAI,GAAGX,KAAK,GACZV,WAAW,CAACN,GAAG,EAAEgB,KAAK,EAAEE,KAAK,EAAEhB,OAAO,CAAC,GACvCK,gBAAgB,CAACP,GAAG,EAAEkB,KAAK,CAACO,GAAG,EAAEV,KAAK,EAAE,IAAI,EAAEG,KAAK,EAAEhB,OAAO,CAAC;IACnE,IAAIF,GAAG,CAACW,MAAM,CAACiB,MAAM,EACjB/B,eAAe,CAACI,EAAE,CAAC4B,MAAM,EAAEb,KAAK,EAAEd,OAAO,CAAC;IAC9CW,MAAM,GAAGc,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC;IACtBpB,GAAG,CAACO,KAAK,CAACc,IAAI,CAACJ,IAAI,CAAC;EACxB;EACAjB,GAAG,CAACoB,KAAK,GAAG,CAAC7B,EAAE,CAACY,MAAM,EAAEA,MAAM,GAAAR,WAAA,GAAES,UAAU,cAAAT,WAAA,cAAAA,WAAA,GAAIQ,MAAM,CAAC;EACrD,OAAOH,GAAG;AACd;AAEA,SAASZ,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}