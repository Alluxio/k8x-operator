{"ast":null,"code":"class YAMLError extends Error {\n  constructor(name, pos, code, message) {\n    super();\n    this.name = name;\n    this.code = code;\n    this.message = message;\n    this.pos = pos;\n  }\n}\nclass YAMLParseError extends YAMLError {\n  constructor(pos, code, message) {\n    super('YAMLParseError', pos, code, message);\n  }\n}\nclass YAMLWarning extends YAMLError {\n  constructor(pos, code, message) {\n    super('YAMLWarning', pos, code, message);\n  }\n}\nconst prettifyError = (src, lc) => error => {\n  if (error.pos[0] === -1) return;\n  error.linePos = error.pos.map(pos => lc.linePos(pos));\n  const {\n    line,\n    col\n  } = error.linePos[0];\n  error.message += \" at line \".concat(line, \", column \").concat(col);\n  let ci = col - 1;\n  let lineStr = src.substring(lc.lineStarts[line - 1], lc.lineStarts[line]).replace(/[\\n\\r]+$/, '');\n  // Trim to max 80 chars, keeping col position near the middle\n  if (ci >= 60 && lineStr.length > 80) {\n    const trimStart = Math.min(ci - 39, lineStr.length - 79);\n    lineStr = '…' + lineStr.substring(trimStart);\n    ci -= trimStart - 1;\n  }\n  if (lineStr.length > 80) lineStr = lineStr.substring(0, 79) + '…';\n  // Include previous line in context if pointing at line start\n  if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {\n    // Regexp won't match if start is trimmed\n    let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);\n    if (prev.length > 80) prev = prev.substring(0, 79) + '…\\n';\n    lineStr = prev + lineStr;\n  }\n  if (/[^ ]/.test(lineStr)) {\n    let count = 1;\n    const end = error.linePos[1];\n    if (end && end.line === line && end.col > col) {\n      count = Math.max(1, Math.min(end.col - col, 80 - ci));\n    }\n    const pointer = ' '.repeat(ci) + '^'.repeat(count);\n    error.message += \":\\n\\n\".concat(lineStr, \"\\n\").concat(pointer, \"\\n\");\n  }\n};\nexport { YAMLError, YAMLParseError, YAMLWarning, prettifyError };","map":{"version":3,"names":["YAMLError","Error","constructor","name","pos","code","message","YAMLParseError","YAMLWarning","prettifyError","src","lc","error","linePos","map","line","col","concat","ci","lineStr","substring","lineStarts","replace","length","trimStart","Math","min","test","prev","count","end","max","pointer","repeat"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/node_modules/yaml/browser/dist/errors.js"],"sourcesContent":["class YAMLError extends Error {\n    constructor(name, pos, code, message) {\n        super();\n        this.name = name;\n        this.code = code;\n        this.message = message;\n        this.pos = pos;\n    }\n}\nclass YAMLParseError extends YAMLError {\n    constructor(pos, code, message) {\n        super('YAMLParseError', pos, code, message);\n    }\n}\nclass YAMLWarning extends YAMLError {\n    constructor(pos, code, message) {\n        super('YAMLWarning', pos, code, message);\n    }\n}\nconst prettifyError = (src, lc) => (error) => {\n    if (error.pos[0] === -1)\n        return;\n    error.linePos = error.pos.map(pos => lc.linePos(pos));\n    const { line, col } = error.linePos[0];\n    error.message += ` at line ${line}, column ${col}`;\n    let ci = col - 1;\n    let lineStr = src\n        .substring(lc.lineStarts[line - 1], lc.lineStarts[line])\n        .replace(/[\\n\\r]+$/, '');\n    // Trim to max 80 chars, keeping col position near the middle\n    if (ci >= 60 && lineStr.length > 80) {\n        const trimStart = Math.min(ci - 39, lineStr.length - 79);\n        lineStr = '…' + lineStr.substring(trimStart);\n        ci -= trimStart - 1;\n    }\n    if (lineStr.length > 80)\n        lineStr = lineStr.substring(0, 79) + '…';\n    // Include previous line in context if pointing at line start\n    if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {\n        // Regexp won't match if start is trimmed\n        let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);\n        if (prev.length > 80)\n            prev = prev.substring(0, 79) + '…\\n';\n        lineStr = prev + lineStr;\n    }\n    if (/[^ ]/.test(lineStr)) {\n        let count = 1;\n        const end = error.linePos[1];\n        if (end && end.line === line && end.col > col) {\n            count = Math.max(1, Math.min(end.col - col, 80 - ci));\n        }\n        const pointer = ' '.repeat(ci) + '^'.repeat(count);\n        error.message += `:\\n\\n${lineStr}\\n${pointer}\\n`;\n    }\n};\n\nexport { YAMLError, YAMLParseError, YAMLWarning, prettifyError };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}