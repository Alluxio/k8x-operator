{"ast":null,"code":"var _jsxFileName = \"/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/containers/dataset-controller.jsx\";\nimport React, { Component } from 'react';\nimport CreateObject from \"../util/CreateObject\";\nimport Datasets from \"../components/dataset/Datasets\";\nimport { AlertMethod } from \"../components/alert/Alert\";\nimport { sendRequest, getRequest, convertInputToStringifyJSON, FetchHeaders } from \"../util/util\";\nimport { connect } from 'react-redux';\nimport { updateDatasetList } from \"../redux/actions/datasetActions\";\nimport { setAlert } from \"../redux/actions/alertActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapStateToProps = state => ({\n  datasetList: state.dataset.datasetList,\n  alertMethod: state.alert.alertMethod,\n  alertMessage: state.alert.alertMessage\n});\nconst mapDispatchToProps = dispatch => ({\n  updateDatasetList: newList => dispatch(updateDatasetList(newList)),\n  setAlert: (alertMethod, alertMessage) => dispatch(setAlert(alertMethod, alertMessage))\n});\nconst serverUrl = '/api/dataset';\nclass DatasetController extends Component {\n  constructor(props) {\n    super(props);\n    this.handleGetRequest = () => {\n      // Call getRequest\n      getRequest(serverUrl).then(statusCodeAndMsg => {\n        if (statusCodeAndMsg[0] === AlertMethod.Success) {\n          const numberOfDataset = statusCodeAndMsg[2]['datasets'].length;\n          const newDatasetList = [];\n          for (let i = 0; i < numberOfDataset; i++) {\n            newDatasetList.push(statusCodeAndMsg[2]['datasets'][i]);\n          }\n          // Update the dataset list in Redux store\n          this.props.updateDatasetList(newDatasetList);\n          console.log(numberOfDataset[0].phase);\n        } else {\n          this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1]);\n        }\n      });\n    };\n    // handleSendRequest is a func that will call  and update the panel status\n    this.handleSendRequest = (httpMethod, dataType, inputData) => {\n      // Prep Body Data\n      let requestBody = '';\n      try {\n        requestBody = convertInputToStringifyJSON(dataType, inputData);\n      } catch (error) {\n        this.props.setAlert(AlertMethod.Warning, 'This is not a Valid Input. ' + error);\n        return;\n      }\n\n      // Prep Http request\n      const requestOptions = {\n        method: httpMethod,\n        headers: FetchHeaders,\n        body: requestBody\n      };\n\n      // Call sendRequest\n      sendRequest(requestOptions, serverUrl).then(statusCodeAndMsg => {\n        this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1]);\n      });\n    };\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.handleGetRequest();\n    }, 2000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Dataset\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Dataset Controller Panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CreateObject, {\n        objectKind: 'Dataset',\n        handleSendRequest: this.handleSendRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Datasets, {\n        handleSendRequest: this.handleSendRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(DatasetController);","map":{"version":3,"names":["React","Component","CreateObject","Datasets","AlertMethod","sendRequest","getRequest","convertInputToStringifyJSON","FetchHeaders","connect","updateDatasetList","setAlert","jsxDEV","_jsxDEV","mapStateToProps","state","datasetList","dataset","alertMethod","alert","alertMessage","mapDispatchToProps","dispatch","newList","serverUrl","DatasetController","constructor","props","handleGetRequest","then","statusCodeAndMsg","Success","numberOfDataset","length","newDatasetList","i","push","console","log","phase","handleSendRequest","httpMethod","dataType","inputData","requestBody","error","Warning","requestOptions","method","headers","body","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","objectKind"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/containers/dataset-controller.jsx"],"sourcesContent":["import React, { Component} from 'react';\nimport CreateObject from \"../util/CreateObject\";\nimport Datasets from \"../components/dataset/Datasets\";\nimport {AlertMethod} from \"../components/alert/Alert\";\nimport {sendRequest, getRequest, convertInputToStringifyJSON, FetchHeaders} from \"../util/util\";\n\nimport { connect } from 'react-redux';\nimport {updateDatasetList} from \"../redux/actions/datasetActions\";\nimport {setAlert} from \"../redux/actions/alertActions\";\n\nconst mapStateToProps = state => ({\n    datasetList: state.dataset.datasetList,\n    alertMethod: state.alert.alertMethod,\n    alertMessage: state.alert.alertMessage,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    updateDatasetList: (newList) => dispatch(updateDatasetList(newList)),\n    setAlert: (alertMethod, alertMessage) => dispatch(setAlert(alertMethod, alertMessage)),\n});\n\nconst serverUrl = '/api/dataset'\n\nclass DatasetController extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.handleGetRequest()\n        }, 2000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    handleGetRequest = () =>  {\n        // Call getRequest\n        getRequest(serverUrl).then(statusCodeAndMsg => {\n            if (statusCodeAndMsg[0] === AlertMethod.Success) {\n                const numberOfDataset = statusCodeAndMsg[2]['datasets'].length\n                const newDatasetList = [];\n                for (let i = 0; i < numberOfDataset; i++) {\n                    newDatasetList.push(statusCodeAndMsg[2]['datasets'][i])\n                }\n                // Update the dataset list in Redux store\n                this.props.updateDatasetList(newDatasetList);\n                console.log(numberOfDataset[0].phase)\n            } else {\n                this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1])\n            }\n        })\n    }\n\n\n    // handleSendRequest is a func that will call  and update the panel status\n    handleSendRequest = (httpMethod, dataType, inputData) =>  {\n        // Prep Body Data\n        let requestBody = '';\n        try {\n             requestBody = convertInputToStringifyJSON(dataType, inputData)\n        } catch (error) {\n            this.props.setAlert(AlertMethod.Warning, 'This is not a Valid Input. ' + error)\n            return\n        }\n\n        // Prep Http request\n        const requestOptions = {\n            method: httpMethod,\n            headers: FetchHeaders,\n            body: requestBody,\n        };\n\n        // Call sendRequest\n        sendRequest(requestOptions, serverUrl).then(statusCodeAndMsg => {\n            this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1])\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Dataset\">\n                <h1>Dataset Controller Panel</h1>\n                <br/>\n                <CreateObject\n                    objectKind={'Dataset'}\n                    handleSendRequest={this.handleSendRequest}\n                />\n                <br/>\n                <Datasets\n                    handleSendRequest={this.handleSendRequest}\n                />\n\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DatasetController);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}