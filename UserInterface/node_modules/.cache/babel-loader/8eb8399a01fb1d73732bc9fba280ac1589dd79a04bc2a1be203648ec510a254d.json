{"ast":null,"code":"import { Pair } from '../nodes/Pair.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { resolveProps } from './resolve-props.js';\nimport { containsNewline } from './util-contains-newline.js';\nimport { flowIndentCheck } from './util-flow-indent-check.js';\nimport { mapIncludes } from './util-map-includes.js';\nconst startColMsg = 'All mapping items must start at the same column';\nfunction resolveBlockMap(_ref, ctx, bm, onError, tag) {\n  var _tag$nodeClass, _commentEnd;\n  let {\n    composeNode,\n    composeEmptyNode\n  } = _ref;\n  const NodeClass = (_tag$nodeClass = tag === null || tag === void 0 ? void 0 : tag.nodeClass) !== null && _tag$nodeClass !== void 0 ? _tag$nodeClass : YAMLMap;\n  const map = new NodeClass(ctx.schema);\n  if (ctx.atRoot) ctx.atRoot = false;\n  let offset = bm.offset;\n  let commentEnd = null;\n  for (const collItem of bm.items) {\n    var _keyProps$found;\n    const {\n      start,\n      key,\n      sep,\n      value\n    } = collItem;\n    // key properties\n    const keyProps = resolveProps(start, {\n      indicator: 'explicit-key-ind',\n      next: key !== null && key !== void 0 ? key : sep === null || sep === void 0 ? void 0 : sep[0],\n      offset,\n      onError,\n      startOnNewline: true\n    });\n    const implicitKey = !keyProps.found;\n    if (implicitKey) {\n      if (key) {\n        if (key.type === 'block-seq') onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');else if ('indent' in key && key.indent !== bm.indent) onError(offset, 'BAD_INDENT', startColMsg);\n      }\n      if (!keyProps.anchor && !keyProps.tag && !sep) {\n        commentEnd = keyProps.end;\n        if (keyProps.comment) {\n          if (map.comment) map.comment += '\\n' + keyProps.comment;else map.comment = keyProps.comment;\n        }\n        continue;\n      }\n      if (keyProps.hasNewlineAfterProp || containsNewline(key)) {\n        onError(key !== null && key !== void 0 ? key : start[start.length - 1], 'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line');\n      }\n    } else if (((_keyProps$found = keyProps.found) === null || _keyProps$found === void 0 ? void 0 : _keyProps$found.indent) !== bm.indent) {\n      onError(offset, 'BAD_INDENT', startColMsg);\n    }\n    // key value\n    const keyStart = keyProps.end;\n    const keyNode = key ? composeNode(ctx, key, keyProps, onError) : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);\n    if (ctx.schema.compat) flowIndentCheck(bm.indent, key, onError);\n    if (mapIncludes(ctx, map.items, keyNode)) onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n    // value properties\n    const valueProps = resolveProps(sep !== null && sep !== void 0 ? sep : [], {\n      indicator: 'map-value-ind',\n      next: value,\n      offset: keyNode.range[2],\n      onError,\n      startOnNewline: !key || key.type === 'block-scalar'\n    });\n    offset = valueProps.end;\n    if (valueProps.found) {\n      if (implicitKey) {\n        if ((value === null || value === void 0 ? void 0 : value.type) === 'block-map' && !valueProps.hasNewline) onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');\n        if (ctx.options.strict && keyProps.start < valueProps.found.offset - 1024) onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');\n      }\n      // value value\n      const valueNode = value ? composeNode(ctx, value, valueProps, onError) : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);\n      if (ctx.schema.compat) flowIndentCheck(bm.indent, value, onError);\n      offset = valueNode.range[2];\n      const pair = new Pair(keyNode, valueNode);\n      if (ctx.options.keepSourceTokens) pair.srcToken = collItem;\n      map.items.push(pair);\n    } else {\n      // key with no value\n      if (implicitKey) onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');\n      if (valueProps.comment) {\n        if (keyNode.comment) keyNode.comment += '\\n' + valueProps.comment;else keyNode.comment = valueProps.comment;\n      }\n      const pair = new Pair(keyNode);\n      if (ctx.options.keepSourceTokens) pair.srcToken = collItem;\n      map.items.push(pair);\n    }\n  }\n  if (commentEnd && commentEnd < offset) onError(commentEnd, 'IMPOSSIBLE', 'Map comment with trailing content');\n  map.range = [bm.offset, offset, (_commentEnd = commentEnd) !== null && _commentEnd !== void 0 ? _commentEnd : offset];\n  return map;\n}\nexport { resolveBlockMap };","map":{"version":3,"names":["Pair","YAMLMap","resolveProps","containsNewline","flowIndentCheck","mapIncludes","startColMsg","resolveBlockMap","_ref","ctx","bm","onError","tag","_tag$nodeClass","_commentEnd","composeNode","composeEmptyNode","NodeClass","nodeClass","map","schema","atRoot","offset","commentEnd","collItem","items","_keyProps$found","start","key","sep","value","keyProps","indicator","next","startOnNewline","implicitKey","found","type","indent","anchor","end","comment","hasNewlineAfterProp","length","keyStart","keyNode","compat","valueProps","range","hasNewline","options","strict","valueNode","pair","keepSourceTokens","srcToken","push"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/node_modules/yaml/browser/dist/compose/resolve-block-map.js"],"sourcesContent":["import { Pair } from '../nodes/Pair.js';\nimport { YAMLMap } from '../nodes/YAMLMap.js';\nimport { resolveProps } from './resolve-props.js';\nimport { containsNewline } from './util-contains-newline.js';\nimport { flowIndentCheck } from './util-flow-indent-check.js';\nimport { mapIncludes } from './util-map-includes.js';\n\nconst startColMsg = 'All mapping items must start at the same column';\nfunction resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {\n    const NodeClass = tag?.nodeClass ?? YAMLMap;\n    const map = new NodeClass(ctx.schema);\n    if (ctx.atRoot)\n        ctx.atRoot = false;\n    let offset = bm.offset;\n    let commentEnd = null;\n    for (const collItem of bm.items) {\n        const { start, key, sep, value } = collItem;\n        // key properties\n        const keyProps = resolveProps(start, {\n            indicator: 'explicit-key-ind',\n            next: key ?? sep?.[0],\n            offset,\n            onError,\n            startOnNewline: true\n        });\n        const implicitKey = !keyProps.found;\n        if (implicitKey) {\n            if (key) {\n                if (key.type === 'block-seq')\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'A block sequence may not be used as an implicit map key');\n                else if ('indent' in key && key.indent !== bm.indent)\n                    onError(offset, 'BAD_INDENT', startColMsg);\n            }\n            if (!keyProps.anchor && !keyProps.tag && !sep) {\n                commentEnd = keyProps.end;\n                if (keyProps.comment) {\n                    if (map.comment)\n                        map.comment += '\\n' + keyProps.comment;\n                    else\n                        map.comment = keyProps.comment;\n                }\n                continue;\n            }\n            if (keyProps.hasNewlineAfterProp || containsNewline(key)) {\n                onError(key ?? start[start.length - 1], 'MULTILINE_IMPLICIT_KEY', 'Implicit keys need to be on a single line');\n            }\n        }\n        else if (keyProps.found?.indent !== bm.indent) {\n            onError(offset, 'BAD_INDENT', startColMsg);\n        }\n        // key value\n        const keyStart = keyProps.end;\n        const keyNode = key\n            ? composeNode(ctx, key, keyProps, onError)\n            : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);\n        if (ctx.schema.compat)\n            flowIndentCheck(bm.indent, key, onError);\n        if (mapIncludes(ctx, map.items, keyNode))\n            onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n        // value properties\n        const valueProps = resolveProps(sep ?? [], {\n            indicator: 'map-value-ind',\n            next: value,\n            offset: keyNode.range[2],\n            onError,\n            startOnNewline: !key || key.type === 'block-scalar'\n        });\n        offset = valueProps.end;\n        if (valueProps.found) {\n            if (implicitKey) {\n                if (value?.type === 'block-map' && !valueProps.hasNewline)\n                    onError(offset, 'BLOCK_AS_IMPLICIT_KEY', 'Nested mappings are not allowed in compact mappings');\n                if (ctx.options.strict &&\n                    keyProps.start < valueProps.found.offset - 1024)\n                    onError(keyNode.range, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit block mapping key');\n            }\n            // value value\n            const valueNode = value\n                ? composeNode(ctx, value, valueProps, onError)\n                : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);\n            if (ctx.schema.compat)\n                flowIndentCheck(bm.indent, value, onError);\n            offset = valueNode.range[2];\n            const pair = new Pair(keyNode, valueNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            map.items.push(pair);\n        }\n        else {\n            // key with no value\n            if (implicitKey)\n                onError(keyNode.range, 'MISSING_CHAR', 'Implicit map keys need to be followed by map values');\n            if (valueProps.comment) {\n                if (keyNode.comment)\n                    keyNode.comment += '\\n' + valueProps.comment;\n                else\n                    keyNode.comment = valueProps.comment;\n            }\n            const pair = new Pair(keyNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            map.items.push(pair);\n        }\n    }\n    if (commentEnd && commentEnd < offset)\n        onError(commentEnd, 'IMPOSSIBLE', 'Map comment with trailing content');\n    map.range = [bm.offset, offset, commentEnd ?? offset];\n    return map;\n}\n\nexport { resolveBlockMap };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}