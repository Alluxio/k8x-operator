{"ast":null,"code":"import { AlertMethod } from \"../components/alert/Alert\";\nimport yaml from 'js-yaml';\nexport const DataType = {\n  JSONString: 1,\n  JSONObject: 2,\n  YAMLString: 3,\n  YAMLObject: 4\n};\n\n// modalStyle contains styling for all modals.\nexport const modalStyle = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: '75%',\n  height: '80%',\n  bgcolor: 'background.paper',\n  border: '1px solid #000',\n  p: 4\n};\nexport const FetchHeaders = {\n  'Content-Type': 'application/json'\n};\n\n/**\n * Use HTTP method in requestOptions to communicate with api server.\n *\n * @param requestOptions contains http method. headers and body.\n * @param {string} serverUrl is a relative or points to your development server.\n * @function sendRequest\n * @returns [AlertMethod, AlertMessage]\n */\nexport async function sendRequest(requestOptions, serverUrl) {\n  try {\n    const response = await fetch(serverUrl, requestOptions);\n    if (!response.ok) {\n      const errorBody = await response.json();\n      const errorMessage = `${errorBody.title}: ${errorBody.details}`;\n      console.log(errorMessage);\n      return [AlertMethod.Error, 'The Operator API returns not OK Response.'];\n    }\n    const data = response.status;\n    console.log(response);\n    console.log(JSON.stringify(data));\n    return [AlertMethod.Success, 'Success!'];\n  } catch (error) {\n    console.log(error);\n    return [AlertMethod.Error, error.toString()];\n  }\n}\n\n/**\n * Use GET method to get data\n *\n * @param {string} serverUrl is a relative or points to your development server.\n * @function getRequest\n * @returns [AlertMethod, AlertMessage, Result in JSON Object(Optional)]\n */\nexport async function getRequest(serverUrl) {\n  try {\n    const response = await fetch(serverUrl);\n    if (!response.ok) {\n      return [AlertMethod.Error, 'The Operator API returns not OK Response.'];\n    }\n    const result = await response.json();\n    return [AlertMethod.Success, 'Success!', result];\n  } catch (error) {\n    console.log(error);\n    return [AlertMethod.Error, error.toString()];\n  }\n}\n\n/**\n * Check the input str is JSON or not\n *\n * @param {string} str is a JSON string\n * @function isJSONString\n * @returns {boolean} bool\n */\nexport function isJSONString(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Convert YAML String to JSON String\n *\n * @param {string} yamlStr is a YAML string\n * @function YAMLtoJSON\n * @returns {string} jsonStr\n */\nexport function YAMLtoJSON(yamlStr) {\n  const obj = yaml.load(yamlStr);\n  return JSON.stringify(obj);\n}\n\n/**\n * Convert JSON String to YAML String\n *\n * @param {JSON} jsonObj is a YAML string\n * @function JSONtoStringifyYAML\n * @returns {string} yamlStr\n */\n_c = YAMLtoJSON;\nexport function JSONtoStringifyYAML(jsonObj) {\n  return yaml.dump(jsonObj);\n}\n\n/**\n * TODO\n *\n * @param dataType\n * @param inputData\n * @function convertToStringifyJSON\n * @returns {string} jsonStr\n */\n_c2 = JSONtoStringifyYAML;\nexport function convertToStringifyJSON(dataType, inputData) {\n  if (dataType === DataType.YAMLString) {\n    const parsedYaml = yaml.load(inputData);\n    return JSON.stringify(parsedYaml, null, 2);\n  }\n  if (dataType === DataType.JSONString) {\n    const parsedJSON = JSON.parse(inputData);\n    return JSON.stringify(parsedJSON);\n  }\n  if (dataType === DataType.YAMLObject) {\n    return JSON.stringify(inputData);\n  }\n  if (dataType === DataType.JSONObject) {\n    return JSON.stringify(inputData);\n  }\n  return JSON.stringify(JSON);\n}\n\n/**\n * TODO\n *\n * @param httpMethod\n * @param dataType\n * @param inputData\n * @function generateHttpRequestOptions\n * @returns  requestOptions\n */\nexport function generateHttpRequestOptions(httpMethod, dataType, inputData) {\n  return {\n    method: httpMethod,\n    headers: FetchHeaders,\n    body: convertToStringifyJSON(dataType, inputData)\n  };\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"YAMLtoJSON\");\n$RefreshReg$(_c2, \"JSONtoStringifyYAML\");","map":{"version":3,"names":["AlertMethod","yaml","DataType","JSONString","JSONObject","YAMLString","YAMLObject","modalStyle","position","top","left","transform","width","height","bgcolor","border","p","FetchHeaders","sendRequest","requestOptions","serverUrl","response","fetch","ok","errorBody","json","errorMessage","title","details","console","log","Error","data","status","JSON","stringify","Success","error","toString","getRequest","result","isJSONString","str","parse","e","YAMLtoJSON","yamlStr","obj","load","_c","JSONtoStringifyYAML","jsonObj","dump","_c2","convertToStringifyJSON","dataType","inputData","parsedYaml","parsedJSON","generateHttpRequestOptions","httpMethod","method","headers","body","$RefreshReg$"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/util/util.jsx"],"sourcesContent":["import {AlertMethod} from \"../components/alert/Alert\";\nimport yaml from 'js-yaml'\n\nexport const DataType =  {\n    JSONString: 1,\n    JSONObject: 2,\n    YAMLString: 3,\n    YAMLObject: 4,\n}\n\n// modalStyle contains styling for all modals.\nexport const modalStyle = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: '75%',\n    height: '80%',\n    bgcolor: 'background.paper',\n    border: '1px solid #000',\n    p: 4,\n};\n\n\nexport const FetchHeaders = {'Content-Type':'application/json'}\n\n/**\n * Use HTTP method in requestOptions to communicate with api server.\n *\n * @param requestOptions contains http method. headers and body.\n * @param {string} serverUrl is a relative or points to your development server.\n * @function sendRequest\n * @returns [AlertMethod, AlertMessage]\n */\nexport async function sendRequest(requestOptions, serverUrl) {\n    try {\n        const response = await fetch(serverUrl, requestOptions);\n        if (!response.ok) {\n            const errorBody = await response.json();\n            const errorMessage = `${errorBody.title}: ${errorBody.details}`;\n            console.log(errorMessage)\n            return [AlertMethod.Error, 'The Operator API returns not OK Response.'];\n        }\n\n        const data = response.status;\n        console.log(response);\n        console.log(JSON.stringify(data));\n        return [AlertMethod.Success, 'Success!'];\n    } catch (error) {\n        console.log(error);\n        return [AlertMethod.Error, error.toString()];\n    }\n}\n\n\n/**\n * Use GET method to get data\n *\n * @param {string} serverUrl is a relative or points to your development server.\n * @function getRequest\n * @returns [AlertMethod, AlertMessage, Result in JSON Object(Optional)]\n */\nexport async function getRequest(serverUrl){\n    try {\n        const response = await fetch(serverUrl);\n        if (!response.ok) {\n            return [AlertMethod.Error, 'The Operator API returns not OK Response.'];\n        }\n        const result = await response.json();\n        return [AlertMethod.Success, 'Success!', result];\n    } catch (error) {\n        console.log(error);\n        return [AlertMethod.Error, error.toString()];\n    }\n}\n\n/**\n * Check the input str is JSON or not\n *\n * @param {string} str is a JSON string\n * @function isJSONString\n * @returns {boolean} bool\n */\nexport function isJSONString(str) {\n    try {JSON.parse(str)}\n    catch (e) { return false}\n    return true;\n}\n\n/**\n * Convert YAML String to JSON String\n *\n * @param {string} yamlStr is a YAML string\n * @function YAMLtoJSON\n * @returns {string} jsonStr\n */\nexport function YAMLtoJSON(yamlStr) {\n    const obj = yaml.load(yamlStr);\n    return JSON.stringify(obj);\n}\n\n/**\n * Convert JSON String to YAML String\n *\n * @param {JSON} jsonObj is a YAML string\n * @function JSONtoStringifyYAML\n * @returns {string} yamlStr\n */\nexport function JSONtoStringifyYAML(jsonObj) {\n    return yaml.dump(jsonObj)\n}\n\n\n/**\n * TODO\n *\n * @param dataType\n * @param inputData\n * @function convertToStringifyJSON\n * @returns {string} jsonStr\n */\nexport function convertToStringifyJSON(dataType, inputData) {\n    if (dataType === DataType.YAMLString) {\n        const parsedYaml = yaml.load(inputData);\n        return JSON.stringify(parsedYaml, null, 2);\n    }\n\n    if (dataType === DataType.JSONString) {\n        const parsedJSON = JSON.parse(inputData);\n        return JSON.stringify(parsedJSON);\n    }\n\n    if (dataType === DataType.YAMLObject) {\n        return JSON.stringify(inputData)\n    }\n    if (dataType === DataType.JSONObject) {\n        return JSON.stringify(inputData)\n    }\n\n    return JSON.stringify(JSON)\n}\n\n\n/**\n * TODO\n *\n * @param httpMethod\n * @param dataType\n * @param inputData\n * @function generateHttpRequestOptions\n * @returns  requestOptions\n */\nexport function generateHttpRequestOptions(httpMethod, dataType, inputData) {\n    return {\n        method: httpMethod,\n        headers: FetchHeaders,\n        body: convertToStringifyJSON(dataType, inputData),\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}