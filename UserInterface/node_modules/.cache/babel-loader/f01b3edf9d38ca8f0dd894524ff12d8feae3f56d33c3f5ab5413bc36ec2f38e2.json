{"ast":null,"code":"var _jsxFileName = \"/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/pages/dataset-controller.jsx\";\nimport React, { Component } from 'react';\nimport CreateDataset from \"../components/dataset/CreateDataset\";\nimport Datasets from \"../components/dataset/Datasets\";\nimport OperatorAlert from \"../components/alert/Alert\";\nimport { PanelStatus } from \"../components/alert/Alert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function isJSON(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\nclass DatasetController extends Component {\n  constructor(props) {\n    super(props);\n    // handleSendRequest is a func that will call  and update the panel status\n    this.handleSendRequest = (stringifyJSON, httpMethod) => {\n      // Check the str is JSON or not\n      if (!isJSON(stringifyJSON)) {\n        console.error('This is not a JSON file');\n        this.setState({\n          panelStatus: PanelStatus.WrongJSON,\n          error: 'This is not a JSON file'\n        });\n        return;\n      }\n\n      // Prep Http request\n      const requestOptions = {\n        method: httpMethod,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: stringifyJSON\n      };\n\n      // Call sendRequest\n      this.sendRequest(requestOptions).then(statusCodeAndMsg => {\n        console.log(statusCodeAndMsg[0]);\n        this.setState({\n          panelStatus: statusCodeAndMsg[0],\n          error: statusCodeAndMsg[1]\n        });\n      });\n    };\n    this.handleCleanAlertStatus = () => {\n      this.setState({\n        panelStatus: PanelStatus.NoStatus,\n        error: ''\n      });\n    };\n    this.state = {\n      serverUrl: '/dataset',\n      isLoaded: false,\n      hasDataset: false,\n      datasetListJSON: JSON,\n      panelStatus: PanelStatus.NoStatus,\n      error: ''\n    };\n    this.fetchData = this.fetchData.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n  }\n  componentDidMount() {\n    this.fetchData();\n  }\n  // sendRequest is an async func that communicate with api server.\n  async sendRequest(requestOptions) {\n    // POST request using fetch with async/await\n    try {\n      const response = await fetch(this.state.serverUrl, requestOptions);\n      if (!response.ok) {\n        return [PanelStatus.UnableToCreate, 'The d'];\n      }\n      const data = await response.status;\n      console.log(response);\n      console.log(JSON.stringify(data));\n      return [PanelStatus.Success, 'Create the dataset '];\n    } catch (error) {\n      console.log(error);\n      return [PanelStatus.UnableToCreate, 'The d'];\n    }\n  }\n  async fetchData() {\n    // console.log(\"Fetch data\")\n    try {\n      const response = await fetch(this.state.serverUrl);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const result = await response.json();\n      if (result.datasets.length === 0) {\n        this.setState({\n          isLoaded: true,\n          hasDataset: false\n        });\n      } else {\n        this.setState({\n          isLoaded: true,\n          hasDataset: true,\n          datasetListJSON: result.datasets\n        });\n      }\n    } catch (error) {\n      console.error(error);\n      this.setState({\n        error: error\n      });\n    }\n  }\n  render() {\n    const {\n      isLoaded,\n      datasetListJSON\n    } = this.state;\n    if (!isLoaded) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Dataset\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Dataset Controller Panel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Unable to Connect \", this.state.serverUrl, \"...\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Dataset\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Dataset Controller Panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Datasets, {\n        datasetListJSON: datasetListJSON,\n        handleSendRequest: this.handleSendRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CreateDataset, {\n        handleSendRequest: this.handleSendRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(OperatorAlert, {\n        panelStatus: this.state.panelStatus,\n        errorMessage: this.state.error,\n        handleCleanAlertStatus: this.handleCleanAlertStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default DatasetController;","map":{"version":3,"names":["React","Component","CreateDataset","Datasets","OperatorAlert","PanelStatus","jsxDEV","_jsxDEV","isJSON","str","JSON","parse","e","DatasetController","constructor","props","handleSendRequest","stringifyJSON","httpMethod","console","error","setState","panelStatus","WrongJSON","requestOptions","method","headers","body","sendRequest","then","statusCodeAndMsg","log","handleCleanAlertStatus","NoStatus","state","serverUrl","isLoaded","hasDataset","datasetListJSON","fetchData","bind","componentDidMount","response","fetch","ok","UnableToCreate","data","status","stringify","Success","Error","result","json","datasets","length","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","errorMessage"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/pages/dataset-controller.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport CreateDataset from \"../components/dataset/CreateDataset\";\nimport Datasets from \"../components/dataset/Datasets\";\nimport OperatorAlert from \"../components/alert/Alert\";\nimport {PanelStatus} from \"../components/alert/Alert\";\n\n\nexport function isJSON(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\nclass DatasetController extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            serverUrl: '/dataset',\n            isLoaded: false,\n\n            hasDataset: false,\n            datasetListJSON: JSON,\n\n\n            panelStatus: PanelStatus.NoStatus,\n            error: '',\n        };\n\n        this.fetchData = this.fetchData.bind(this)\n        this.sendRequest = this.sendRequest.bind(this)\n    }\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n    // handleSendRequest is a func that will call  and update the panel status\n    handleSendRequest = (stringifyJSON, httpMethod) =>  {\n        // Check the str is JSON or not\n        if (!isJSON(stringifyJSON)) {\n            console.error('This is not a JSON file')\n            this.setState({\n                panelStatus : PanelStatus.WrongJSON,\n                error: 'This is not a JSON file'\n            })\n            return\n        }\n\n        // Prep Http request\n        const requestOptions = {\n            method: httpMethod,\n            headers: {'Content-Type':'application/json'},\n            body: stringifyJSON\n        };\n\n        // Call sendRequest\n        this.sendRequest(requestOptions).then(statusCodeAndMsg => {\n            console.log(statusCodeAndMsg[0])\n            this.setState({\n                panelStatus : statusCodeAndMsg[0],\n                error : statusCodeAndMsg[1],\n            })\n        })\n    }\n\n    // sendRequest is an async func that communicate with api server.\n    async sendRequest(requestOptions) {\n        // POST request using fetch with async/await\n        try {\n            const response = await fetch(this.state.serverUrl, requestOptions);\n            if (!response.ok) {\n                return [PanelStatus.UnableToCreate, 'The d']\n            }\n\n            const data = await response.status;\n            console.log(response)\n            console.log(JSON.stringify(data))\n            return [PanelStatus.Success, 'Create the dataset ']\n        } catch (error) {\n            console.log(error)\n            return [PanelStatus.UnableToCreate, 'The d']\n        }\n    }\n\n    async fetchData() {\n        // console.log(\"Fetch data\")\n        try {\n            const response = await fetch(this.state.serverUrl)\n            if (!response.ok) { throw new Error('Network response was not ok');}\n\n            const result = await response.json();\n            if (result.datasets.length === 0) {\n                this.setState({\n                    isLoaded: true,\n                    hasDataset : false\n                });\n            } else {\n                this.setState({\n                    isLoaded: true,\n                    hasDataset : true,\n                    datasetListJSON : result.datasets,\n                });\n            }\n        } catch (error) {\n            console.error(error);\n            this.setState({\n                error: error\n            });\n        }\n    }\n\n\n    handleCleanAlertStatus = () =>  {\n        this.setState({\n            panelStatus: PanelStatus.NoStatus,\n            error: '',\n        })\n    }\n\n    render() {\n        const {isLoaded, datasetListJSON} = this.state\n        if (!isLoaded) {\n            return (\n                <div className=\"Dataset\">\n                    <h1>Dataset Controller Panel</h1>\n                    <br/>\n                    <h2>Unable to Connect {this.state.serverUrl}...</h2>\n                </div>\n            );\n        }\n\n\n        return (\n            <div className=\"Dataset\">\n                <h1>Dataset Controller Panel</h1>\n\n                <Datasets\n                    datasetListJSON={datasetListJSON}\n                    handleSendRequest={this.handleSendRequest}\n                />\n\n                <CreateDataset\n                    handleSendRequest={this.handleSendRequest}\n                />\n\n                <OperatorAlert panelStatus={this.state.panelStatus}\n                               errorMessage={this.state.error}\n                               handleCleanAlertStatus={this.handleCleanAlertStatus}\n                />\n            </div>\n        );\n    }\n}\n\nexport default DatasetController;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}