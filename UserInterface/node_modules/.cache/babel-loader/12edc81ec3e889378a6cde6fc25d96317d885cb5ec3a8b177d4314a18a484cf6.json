{"ast":null,"code":"/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-from-html').Options} FromHtmlOptions\n * @typedef {import('unified').Parser<Root>} Parser\n */\n\n/**\n * @typedef {Omit<FromHtmlOptions, 'onerror'> & RehypeParseFields} Options\n *   Configuration.\n *\n * @typedef RehypeParseFields\n *   Extra fields.\n * @property {boolean | null | undefined} [emitParseErrors=false]\n *   Whether to emit parse errors while parsing (default: `false`).\n *\n *   > ðŸ‘‰ **Note**: parse errors are currently being added to HTML.\n *   > Not all errors emitted by parse5 (or us) are specced yet.\n *   > Some documentation may still be missing.\n */\n\nimport { fromHtml } from 'hast-util-from-html';\n\n/**\n * Plugin to add support for parsing from HTML.\n *\n * > ðŸ‘‰ **Note**: this is not an XML parser.\n * > It supports SVG as embedded in HTML.\n * > It does not support the features available in XML.\n * > Passing SVG files might break but fragments of modern SVG should be fine.\n * > Use [`xast-util-from-xml`][xast-util-from-xml] to parse XML.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function rehypeParse(options) {\n  /** @type {import('unified').Processor<Root>} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this;\n  const {\n    emitParseErrors,\n    ...settings\n  } = {\n    ...self.data('settings'),\n    ...options\n  };\n  self.parser = parser;\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc, file) {\n    return fromHtml(doc, {\n      ...settings,\n      onerror: emitParseErrors ? function (message) {\n        if (file.path) {\n          message.name = file.path + ':' + message.name;\n          message.file = file.path;\n        }\n        file.messages.push(message);\n      } : undefined\n    });\n  }\n}","map":{"version":3,"names":["fromHtml","rehypeParse","options","self","emitParseErrors","settings","data","parser","doc","file","onerror","message","path","name","messages","push","undefined"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/node_modules/rehype-parse/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-from-html').Options} FromHtmlOptions\n * @typedef {import('unified').Parser<Root>} Parser\n */\n\n/**\n * @typedef {Omit<FromHtmlOptions, 'onerror'> & RehypeParseFields} Options\n *   Configuration.\n *\n * @typedef RehypeParseFields\n *   Extra fields.\n * @property {boolean | null | undefined} [emitParseErrors=false]\n *   Whether to emit parse errors while parsing (default: `false`).\n *\n *   > ðŸ‘‰ **Note**: parse errors are currently being added to HTML.\n *   > Not all errors emitted by parse5 (or us) are specced yet.\n *   > Some documentation may still be missing.\n */\n\nimport {fromHtml} from 'hast-util-from-html'\n\n/**\n * Plugin to add support for parsing from HTML.\n *\n * > ðŸ‘‰ **Note**: this is not an XML parser.\n * > It supports SVG as embedded in HTML.\n * > It does not support the features available in XML.\n * > Passing SVG files might break but fragments of modern SVG should be fine.\n * > Use [`xast-util-from-xml`][xast-util-from-xml] to parse XML.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function rehypeParse(options) {\n  /** @type {import('unified').Processor<Root>} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n  const {emitParseErrors, ...settings} = {...self.data('settings'), ...options}\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc, file) {\n    return fromHtml(doc, {\n      ...settings,\n      onerror: emitParseErrors\n        ? function (message) {\n            if (file.path) {\n              message.name = file.path + ':' + message.name\n              message.file = file.path\n            }\n\n            file.messages.push(message)\n          }\n        : undefined\n    })\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,QAAQ,QAAO,qBAAqB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,WAAWA,CAACC,OAAO,EAAE;EAC3C;EACA;EACA,MAAMC,IAAI,GAAG,IAAI;EACjB,MAAM;IAACC,eAAe;IAAE,GAAGC;EAAQ,CAAC,GAAG;IAAC,GAAGF,IAAI,CAACG,IAAI,CAAC,UAAU,CAAC;IAAE,GAAGJ;EAAO,CAAC;EAE7EC,IAAI,CAACI,MAAM,GAAGA,MAAM;;EAEpB;AACF;AACA;EACE,SAASA,MAAMA,CAACC,GAAG,EAAEC,IAAI,EAAE;IACzB,OAAOT,QAAQ,CAACQ,GAAG,EAAE;MACnB,GAAGH,QAAQ;MACXK,OAAO,EAAEN,eAAe,GACpB,UAAUO,OAAO,EAAE;QACjB,IAAIF,IAAI,CAACG,IAAI,EAAE;UACbD,OAAO,CAACE,IAAI,GAAGJ,IAAI,CAACG,IAAI,GAAG,GAAG,GAAGD,OAAO,CAACE,IAAI;UAC7CF,OAAO,CAACF,IAAI,GAAGA,IAAI,CAACG,IAAI;QAC1B;QAEAH,IAAI,CAACK,QAAQ,CAACC,IAAI,CAACJ,OAAO,CAAC;MAC7B,CAAC,GACDK;IACN,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}