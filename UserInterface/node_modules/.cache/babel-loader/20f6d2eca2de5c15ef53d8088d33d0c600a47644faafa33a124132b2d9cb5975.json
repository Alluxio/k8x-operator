{"ast":null,"code":"import { Document } from '../doc/Document.js';\nimport { composeNode, composeEmptyNode } from './compose-node.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { resolveProps } from './resolve-props.js';\nfunction composeDoc(options, directives, {\n  offset,\n  start,\n  value,\n  end\n}, onError) {\n  const opts = Object.assign({\n    _directives: directives\n  }, options);\n  const doc = new Document(undefined, opts);\n  const ctx = {\n    atRoot: true,\n    directives: doc.directives,\n    options: doc.options,\n    schema: doc.schema\n  };\n  const props = resolveProps(start, {\n    indicator: 'doc-start',\n    next: value ?? end?.[0],\n    offset,\n    onError,\n    startOnNewline: true\n  });\n  if (props.found) {\n    doc.directives.docStart = true;\n    if (value && (value.type === 'block-map' || value.type === 'block-seq') && !props.hasNewline) onError(props.end, 'MISSING_CHAR', 'Block collection cannot start on same line with directives-end marker');\n  }\n  // @ts-expect-error If Contents is set, let's trust the user\n  doc.contents = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, start, null, props, onError);\n  const contentEnd = doc.contents.range[2];\n  const re = resolveEnd(end, contentEnd, false, onError);\n  if (re.comment) doc.comment = re.comment;\n  doc.range = [offset, contentEnd, re.offset];\n  return doc;\n}\nexport { composeDoc };","map":{"version":3,"names":["Document","composeNode","composeEmptyNode","resolveEnd","resolveProps","composeDoc","options","directives","offset","start","value","end","onError","opts","Object","assign","_directives","doc","undefined","ctx","atRoot","schema","props","indicator","next","startOnNewline","found","docStart","type","hasNewline","contents","contentEnd","range","re","comment"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/node_modules/yaml/browser/dist/compose/compose-doc.js"],"sourcesContent":["import { Document } from '../doc/Document.js';\nimport { composeNode, composeEmptyNode } from './compose-node.js';\nimport { resolveEnd } from './resolve-end.js';\nimport { resolveProps } from './resolve-props.js';\n\nfunction composeDoc(options, directives, { offset, start, value, end }, onError) {\n    const opts = Object.assign({ _directives: directives }, options);\n    const doc = new Document(undefined, opts);\n    const ctx = {\n        atRoot: true,\n        directives: doc.directives,\n        options: doc.options,\n        schema: doc.schema\n    };\n    const props = resolveProps(start, {\n        indicator: 'doc-start',\n        next: value ?? end?.[0],\n        offset,\n        onError,\n        startOnNewline: true\n    });\n    if (props.found) {\n        doc.directives.docStart = true;\n        if (value &&\n            (value.type === 'block-map' || value.type === 'block-seq') &&\n            !props.hasNewline)\n            onError(props.end, 'MISSING_CHAR', 'Block collection cannot start on same line with directives-end marker');\n    }\n    // @ts-expect-error If Contents is set, let's trust the user\n    doc.contents = value\n        ? composeNode(ctx, value, props, onError)\n        : composeEmptyNode(ctx, props.end, start, null, props, onError);\n    const contentEnd = doc.contents.range[2];\n    const re = resolveEnd(end, contentEnd, false, onError);\n    if (re.comment)\n        doc.comment = re.comment;\n    doc.range = [offset, contentEnd, re.offset];\n    return doc;\n}\n\nexport { composeDoc };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,WAAW,EAAEC,gBAAgB,QAAQ,mBAAmB;AACjE,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,YAAY,QAAQ,oBAAoB;AAEjD,SAASC,UAAUA,CAACC,OAAO,EAAEC,UAAU,EAAE;EAAEC,MAAM;EAAEC,KAAK;EAAEC,KAAK;EAAEC;AAAI,CAAC,EAAEC,OAAO,EAAE;EAC7E,MAAMC,IAAI,GAAGC,MAAM,CAACC,MAAM,CAAC;IAAEC,WAAW,EAAET;EAAW,CAAC,EAAED,OAAO,CAAC;EAChE,MAAMW,GAAG,GAAG,IAAIjB,QAAQ,CAACkB,SAAS,EAAEL,IAAI,CAAC;EACzC,MAAMM,GAAG,GAAG;IACRC,MAAM,EAAE,IAAI;IACZb,UAAU,EAAEU,GAAG,CAACV,UAAU;IAC1BD,OAAO,EAAEW,GAAG,CAACX,OAAO;IACpBe,MAAM,EAAEJ,GAAG,CAACI;EAChB,CAAC;EACD,MAAMC,KAAK,GAAGlB,YAAY,CAACK,KAAK,EAAE;IAC9Bc,SAAS,EAAE,WAAW;IACtBC,IAAI,EAAEd,KAAK,IAAIC,GAAG,GAAG,CAAC,CAAC;IACvBH,MAAM;IACNI,OAAO;IACPa,cAAc,EAAE;EACpB,CAAC,CAAC;EACF,IAAIH,KAAK,CAACI,KAAK,EAAE;IACbT,GAAG,CAACV,UAAU,CAACoB,QAAQ,GAAG,IAAI;IAC9B,IAAIjB,KAAK,KACJA,KAAK,CAACkB,IAAI,KAAK,WAAW,IAAIlB,KAAK,CAACkB,IAAI,KAAK,WAAW,CAAC,IAC1D,CAACN,KAAK,CAACO,UAAU,EACjBjB,OAAO,CAACU,KAAK,CAACX,GAAG,EAAE,cAAc,EAAE,uEAAuE,CAAC;EACnH;EACA;EACAM,GAAG,CAACa,QAAQ,GAAGpB,KAAK,GACdT,WAAW,CAACkB,GAAG,EAAET,KAAK,EAAEY,KAAK,EAAEV,OAAO,CAAC,GACvCV,gBAAgB,CAACiB,GAAG,EAAEG,KAAK,CAACX,GAAG,EAAEF,KAAK,EAAE,IAAI,EAAEa,KAAK,EAAEV,OAAO,CAAC;EACnE,MAAMmB,UAAU,GAAGd,GAAG,CAACa,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAC;EACxC,MAAMC,EAAE,GAAG9B,UAAU,CAACQ,GAAG,EAAEoB,UAAU,EAAE,KAAK,EAAEnB,OAAO,CAAC;EACtD,IAAIqB,EAAE,CAACC,OAAO,EACVjB,GAAG,CAACiB,OAAO,GAAGD,EAAE,CAACC,OAAO;EAC5BjB,GAAG,CAACe,KAAK,GAAG,CAACxB,MAAM,EAAEuB,UAAU,EAAEE,EAAE,CAACzB,MAAM,CAAC;EAC3C,OAAOS,GAAG;AACd;AAEA,SAASZ,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}