{"ast":null,"code":"import{AlertMethod}from\"../alert/Alert\";import YAML from'yaml';export const FetchHeaders={'Content-Type':'application/json'};/**\n * Use method in requestOptions to communicate with api server.\n *\n * @param requestOptions contains http method. headers and body.\n * @param {string} serverUrl is a relative or points to your development server.\n * @function sendRequest\n * @returns [AlertMethod, AlertMessage]\n */export async function sendRequest(requestOptions,serverUrl){// POST request using fetch with async/await\ntry{const response=await fetch(serverUrl,requestOptions);if(!response.ok){return[AlertMethod.Error,'The Operator API returns not OK Response.'];}const data=response.status;console.log(response);console.log(JSON.stringify(data));return[AlertMethod.Success,'Success!'];}catch(error){console.log(error);return[AlertMethod.Error,error.toString()];}}/**\n * Use GET method to get data\n *\n * @param {string} serverUrl is a relative or points to your development server.\n * @function getRequest\n * @returns [AlertMethod, AlertMessage, Result in JSON Object(Optional)]\n */export async function getRequest(serverUrl){try{const response=await fetch(serverUrl);if(!response.ok){return[AlertMethod.Error,'The Operator API returns not OK Response.'];}console.log(response);const result=await response.json();return[AlertMethod.Success,'Success!',result];}catch(error){console.log(error);return[AlertMethod.Error,error.toString()];}}/**\n * Check the input str is JSON or not\n *\n * @param {string} str is a JSON string\n * @function isJSONString\n * @returns {boolean} bool\n */export function isJSONString(str){try{JSON.parse(str);}catch(e){return false;}return true;}/**\n * Convert YAML String to JSON String\n *\n * @param {string} yamlStr is a YAML string\n * @function YAMLtoJSON\n * @returns {string} jsonStr\n */export function YAMLtoJSON(yamlStr){const obj=YAML.parse(yamlStr);return JSON.stringify(obj);}/**\n * Convert JSON String to YAML String\n *\n * @param {string} jsonStr is a YAML string\n * @function JSONtoYAML\n * @returns {string} yamlStr\n */export function JSONtoYAML(jsonStr){const obj=JSON.parse(jsonStr);return YAML.stringify(obj);}export function validateInputConfigAndParseAsJSON(input){try{const jsonObject=JSON.parse(input);return JSON.stringify(jsonObject);}catch(e){// If JSON parsing fails, try YAML\ntry{const yamlObject=YAML.parse(input);return JSON.stringify(yamlObject);}catch(yamlError){return'ERROR';}}}","map":{"version":3,"names":["AlertMethod","YAML","FetchHeaders","sendRequest","requestOptions","serverUrl","response","fetch","ok","Error","data","status","console","log","JSON","stringify","Success","error","toString","getRequest","result","json","isJSONString","str","parse","e","YAMLtoJSON","yamlStr","obj","JSONtoYAML","jsonStr","validateInputConfigAndParseAsJSON","input","jsonObject","yamlObject","yamlError"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/components/util/util.jsx"],"sourcesContent":["import {AlertMethod} from \"../alert/Alert\";\nimport YAML from 'yaml'\n\nexport const FetchHeaders = {'Content-Type':'application/json'}\n\n/**\n * Use method in requestOptions to communicate with api server.\n *\n * @param requestOptions contains http method. headers and body.\n * @param {string} serverUrl is a relative or points to your development server.\n * @function sendRequest\n * @returns [AlertMethod, AlertMessage]\n */\nexport async function sendRequest(requestOptions, serverUrl) {\n    // POST request using fetch with async/await\n    try {\n        const response = await fetch(serverUrl, requestOptions);\n        if (!response.ok) {\n            return [AlertMethod.Error, 'The Operator API returns not OK Response.'];\n        }\n\n        const data = response.status;\n        console.log(response);\n        console.log(JSON.stringify(data));\n        return [AlertMethod.Success, 'Success!'];\n    } catch (error) {\n        console.log(error);\n        return [AlertMethod.Error, error.toString()];\n    }\n}\n\n\n/**\n * Use GET method to get data\n *\n * @param {string} serverUrl is a relative or points to your development server.\n * @function getRequest\n * @returns [AlertMethod, AlertMessage, Result in JSON Object(Optional)]\n */\nexport async function getRequest(serverUrl){\n    try {\n        const response = await fetch(serverUrl);\n        if (!response.ok) {\n            return [AlertMethod.Error, 'The Operator API returns not OK Response.'];\n        }\n        console.log(response)\n        const result = await response.json();\n\n        return [AlertMethod.Success, 'Success!', result];\n    } catch (error) {\n        console.log(error);\n        return [AlertMethod.Error, error.toString()];\n    }\n}\n\n/**\n * Check the input str is JSON or not\n *\n * @param {string} str is a JSON string\n * @function isJSONString\n * @returns {boolean} bool\n */\nexport function isJSONString(str) {\n    try {JSON.parse(str)}\n    catch (e) { return false}\n    return true;\n}\n\n/**\n * Convert YAML String to JSON String\n *\n * @param {string} yamlStr is a YAML string\n * @function YAMLtoJSON\n * @returns {string} jsonStr\n */\nexport function YAMLtoJSON(yamlStr) {\n    const obj = YAML.parse(yamlStr);\n    return JSON.stringify(obj);\n}\n\n/**\n * Convert JSON String to YAML String\n *\n * @param {string} jsonStr is a YAML string\n * @function JSONtoYAML\n * @returns {string} yamlStr\n */\nexport function JSONtoYAML(jsonStr) {\n    const obj = JSON.parse(jsonStr);\n    return YAML.stringify(obj);\n}\n\nexport function validateInputConfigAndParseAsJSON(input) {\n    try {\n        const jsonObject = JSON.parse(input);\n        return JSON.stringify(jsonObject);\n    } catch (e) {\n    // If JSON parsing fails, try YAML\n        try {\n            const yamlObject = YAML.parse(input)\n            return JSON.stringify(yamlObject);\n        } catch (yamlError) {\n            return 'ERROR'\n        }\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}