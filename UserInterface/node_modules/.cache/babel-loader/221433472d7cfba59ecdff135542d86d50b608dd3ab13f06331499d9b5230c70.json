{"ast":null,"code":"var _jsxFileName = \"/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/containers/dataset-controller.jsx\";\nimport React, { Component } from 'react';\nimport CreateObject from \"../util/CreateObject\";\nimport Datasets from \"../components/dataset/Datasets\";\nimport { AlertMethod } from \"../components/alert/Alert\";\nimport { sendRequest, getRequest, convertToStringifyJSON, FetchHeaders, generateHttpRequestOptions } from \"../util/util\";\nimport { connect } from 'react-redux';\nimport { updateDatasetList } from \"../redux/actions/datasetActions\";\nimport { setAlert } from \"../redux/actions/alertActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapStateToProps = state => ({\n  datasetList: state.dataset.datasetList,\n  alertMethod: state.alert.alertMethod,\n  alertMessage: state.alert.alertMessage\n});\nconst mapDispatchToProps = dispatch => ({\n  updateDatasetList: newList => dispatch(updateDatasetList(newList)),\n  setAlert: (alertMethod, alertMessage) => dispatch(setAlert(alertMethod, alertMessage))\n});\nconst serverUrl = '/api/dataset';\nclass DatasetController extends Component {\n  constructor(props) {\n    super(props);\n    this.handleGetRequest = () => {\n      // Call getRequest\n      getRequest(serverUrl).then(statusCodeAndMsg => {\n        if (statusCodeAndMsg[0] === AlertMethod.Success) {\n          const numberOfDataset = statusCodeAndMsg[2]['datasets'].length;\n          const newDatasetList = [];\n          for (let i = 0; i < numberOfDataset; i++) {\n            newDatasetList.push(statusCodeAndMsg[2]['datasets'][i]);\n          }\n          // Update the dataset list in Redux store\n          this.props.updateDatasetList(newDatasetList);\n        } else {\n          this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1]);\n        }\n      });\n    };\n    // handleSendRequest is a func that will call  and update the panel status\n    this.handleSendRequest = (httpMethod, dataType, inputData) => {\n      let requestOptions = {};\n      try {\n        requestOptions = generateHttpRequestOptions(httpMethod, dataType, inputData);\n      } catch (error) {\n        this.props.setAlert(AlertMethod.Warning, 'Unable to Parse Input. ' + error);\n        return;\n      }\n\n      // Call sendRequest\n      sendRequest(requestOptions, serverUrl).then(statusCodeAndMsg => {\n        this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1]);\n      });\n    };\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.handleGetRequest();\n    }, 2000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Dataset\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Dataset Controller Panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CreateObject, {\n        objectKind: 'Dataset',\n        handleSendRequest: this.handleSendRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Datasets, {\n        handleSendRequest: this.handleSendRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(DatasetController);","map":{"version":3,"names":["React","Component","CreateObject","Datasets","AlertMethod","sendRequest","getRequest","convertToStringifyJSON","FetchHeaders","generateHttpRequestOptions","connect","updateDatasetList","setAlert","jsxDEV","_jsxDEV","mapStateToProps","state","datasetList","dataset","alertMethod","alert","alertMessage","mapDispatchToProps","dispatch","newList","serverUrl","DatasetController","constructor","props","handleGetRequest","then","statusCodeAndMsg","Success","numberOfDataset","length","newDatasetList","i","push","handleSendRequest","httpMethod","dataType","inputData","requestOptions","error","Warning","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","objectKind"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/containers/dataset-controller.jsx"],"sourcesContent":["import React, { Component} from 'react';\nimport CreateObject from \"../util/CreateObject\";\nimport Datasets from \"../components/dataset/Datasets\";\nimport {AlertMethod} from \"../components/alert/Alert\";\nimport {\n    sendRequest,\n    getRequest,\n    convertToStringifyJSON,\n    FetchHeaders,\n    generateHttpRequestOptions\n} from \"../util/util\";\nimport { connect } from 'react-redux';\nimport {updateDatasetList} from \"../redux/actions/datasetActions\";\nimport {setAlert} from \"../redux/actions/alertActions\";\n\nconst mapStateToProps = state => ({\n    datasetList: state.dataset.datasetList,\n    alertMethod: state.alert.alertMethod,\n    alertMessage: state.alert.alertMessage,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    updateDatasetList: (newList) => dispatch(updateDatasetList(newList)),\n    setAlert: (alertMethod, alertMessage) => dispatch(setAlert(alertMethod, alertMessage)),\n});\n\nconst serverUrl = '/api/dataset'\n\nclass DatasetController extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.handleGetRequest()\n        }, 2000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    handleGetRequest = () =>  {\n        // Call getRequest\n        getRequest(serverUrl).then(statusCodeAndMsg => {\n            if (statusCodeAndMsg[0] === AlertMethod.Success) {\n                const numberOfDataset = statusCodeAndMsg[2]['datasets'].length\n                const newDatasetList = [];\n                for (let i = 0; i < numberOfDataset; i++) {\n                    newDatasetList.push(statusCodeAndMsg[2]['datasets'][i])\n                }\n                // Update the dataset list in Redux store\n                this.props.updateDatasetList(newDatasetList);\n            } else {\n                this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1])\n            }\n        })\n    }\n\n\n    // handleSendRequest is a func that will call  and update the panel status\n    handleSendRequest = (httpMethod, dataType, inputData) =>  {\n        let requestOptions = {}\n        try {\n            requestOptions = generateHttpRequestOptions(httpMethod, dataType, inputData)\n        } catch (error){\n            this.props.setAlert(AlertMethod.Warning, 'Unable to Parse Input. ' + error)\n            return\n        }\n\n        // Call sendRequest\n        sendRequest(requestOptions, serverUrl).then(statusCodeAndMsg => {\n            this.props.setAlert(statusCodeAndMsg[0], statusCodeAndMsg[1])\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Dataset\">\n                <h1>Dataset Controller Panel</h1>\n                <br/>\n                <CreateObject\n                    objectKind={'Dataset'}\n                    handleSendRequest={this.handleSendRequest}\n                />\n                <br/>\n                <Datasets\n                    handleSendRequest={this.handleSendRequest}\n                />\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DatasetController);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}