{"ast":null,"code":"import React,{Component}from'react';import CreateObject from\"../components/util/CreateObject\";import Datasets from\"../components/dataset/Datasets\";import OperatorAlert from\"../components/alert/Alert\";import{AlertMethod}from\"../components/alert/Alert\";import{sendRequest,getRequest,isJSONString}from\"../components/util/util\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const serverUrl='/dataset';class DatasetController extends Component{constructor(props){super(props);this.handleGetRequest=()=>{// Call getRequest\ngetRequest(serverUrl).then(statusCodeAndMsg=>{if(statusCodeAndMsg[0]===AlertMethod.Success){// TODO find out why it is always different, and not update list correctly.\nif(this.state.datasetListJSON!==statusCodeAndMsg[2]['datasets']){console.log(\"Different JSON File\");}else{console.log(\"Same JSON File\");}this.setState({isLoaded:true,datasetListJSON:statusCodeAndMsg[2]['datasets']});console.log(statusCodeAndMsg[2]);}else{this.setState({alertMethod:statusCodeAndMsg[0],alertMessage:statusCodeAndMsg[1]});}});};// handleSendRequest is a func that will call  and update the panel status\nthis.handleSendRequest=(stringifyJSON,httpMethod)=>{// Check the str is JSON or not\nif(!isJSONString(stringifyJSON)){this.setState({alertMethod:AlertMethod.Warning,alertMessage:'This is not a JSON file.'});return;}// Prep Http request\nconst requestOptions={method:httpMethod,headers:{'Content-Type':'application/json'},body:stringifyJSON};// Call sendRequest\nsendRequest(requestOptions,serverUrl).then(statusCodeAndMsg=>{this.setState({alertMethod:statusCodeAndMsg[0],alertMessage:statusCodeAndMsg[1]});});};this.handleCleanAlertStatus=()=>{this.setState({alertMethod:AlertMethod.NoStatus,alertMessage:''});};this.state={isLoaded:false,datasetListJSON:JSON,alertMethod:AlertMethod.NoStatus,alertMessage:''};}componentDidMount(){this.interval=setInterval(()=>{this.handleGetRequest();},2000);}componentWillUnmount(){clearInterval(this.interval);}render(){const{isLoaded,datasetListJSON}=this.state;if(!isLoaded){return/*#__PURE__*/_jsxs(\"div\",{className:\"Dataset\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Dataset Controller Panel\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"h2\",{children:[\"Connecting Endpoint: \",serverUrl]})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"Dataset\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Dataset Controller Panel\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Datasets,{datasetListJSON:datasetListJSON,handleSendRequest:this.handleSendRequest}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(CreateObject,{objectKind:'Dataset',handleSendRequest:this.handleSendRequest}),/*#__PURE__*/_jsx(OperatorAlert,{alertMethod:this.state.alertMethod,alertMessage:this.state.alertMessage,handleCleanAlertStatus:this.handleCleanAlertStatus})]});}}export default DatasetController;","map":{"version":3,"names":["React","Component","CreateObject","Datasets","OperatorAlert","AlertMethod","sendRequest","getRequest","isJSONString","jsx","_jsx","jsxs","_jsxs","serverUrl","DatasetController","constructor","props","handleGetRequest","then","statusCodeAndMsg","Success","state","datasetListJSON","console","log","setState","isLoaded","alertMethod","alertMessage","handleSendRequest","stringifyJSON","httpMethod","Warning","requestOptions","method","headers","body","handleCleanAlertStatus","NoStatus","JSON","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","className","children","objectKind"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/pages/dataset-controller.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport CreateObject from \"../components/util/CreateObject\";\nimport Datasets from \"../components/dataset/Datasets\";\nimport OperatorAlert from \"../components/alert/Alert\";\nimport {AlertMethod} from \"../components/alert/Alert\";\nimport {sendRequest, getRequest, isJSONString} from \"../components/util/util\";\n\nconst serverUrl = '/dataset'\n\nclass DatasetController extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            isLoaded: false,\n\n            datasetListJSON: JSON,\n\n            alertMethod: AlertMethod.NoStatus,\n            alertMessage: '',\n        };\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.handleGetRequest()\n        }, 2000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    handleGetRequest = () =>  {\n        // Call getRequest\n        getRequest(serverUrl).then(statusCodeAndMsg => {\n            if (statusCodeAndMsg[0] === AlertMethod.Success) {\n                // TODO find out why it is always different, and not update list correctly.\n                if (this.state.datasetListJSON !== statusCodeAndMsg[2]['datasets']) {\n                    console.log(\"Different JSON File\")\n                } else {\n                    console.log(\"Same JSON File\")\n                }\n\n                this.setState({\n                    isLoaded: true,\n                    datasetListJSON : statusCodeAndMsg[2]['datasets'],\n                });\n                console.log(statusCodeAndMsg[2])\n            } else {\n                this.setState({\n                    alertMethod : statusCodeAndMsg[0],\n                    alertMessage : statusCodeAndMsg[1],\n                })\n            }\n        })\n    }\n\n    // handleSendRequest is a func that will call  and update the panel status\n    handleSendRequest = (stringifyJSON, httpMethod) =>  {\n        // Check the str is JSON or not\n        if (!isJSONString(stringifyJSON)) {\n            this.setState({\n                alertMethod : AlertMethod.Warning,\n                alertMessage: 'This is not a JSON file.',\n            })\n            return\n        }\n\n        // Prep Http request\n        const requestOptions = {\n            method: httpMethod,\n            headers: {'Content-Type':'application/json'},\n            body: stringifyJSON\n        };\n\n        // Call sendRequest\n        sendRequest(requestOptions, serverUrl).then(statusCodeAndMsg => {\n            this.setState({\n                alertMethod : statusCodeAndMsg[0],\n                alertMessage : statusCodeAndMsg[1],\n            })\n        })\n    }\n\n    handleCleanAlertStatus = () =>  {\n        this.setState({\n            alertMethod: AlertMethod.NoStatus,\n            alertMessage: '',\n        })\n    }\n\n    render() {\n        const {isLoaded, datasetListJSON} = this.state\n        if (!isLoaded) {\n            return (\n                <div className=\"Dataset\">\n                    <h1>Dataset Controller Panel</h1>\n                    <br/>\n                    <h2>Connecting Endpoint: {serverUrl}</h2>\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"Dataset\">\n                <h1>Dataset Controller Panel</h1>\n                <br/>\n                <Datasets\n                    datasetListJSON={datasetListJSON}\n                    handleSendRequest={this.handleSendRequest}\n                />\n                <br/>\n                <CreateObject\n                    objectKind={'Dataset'}\n                    handleSendRequest={this.handleSendRequest}\n                />\n\n                <OperatorAlert alertMethod={this.state.alertMethod}\n                               alertMessage={this.state.alertMessage}\n                               handleCleanAlertStatus={this.handleCleanAlertStatus}\n                />\n            </div>\n        );\n    }\n}\n\nexport default DatasetController;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,MAAO,CAAAC,YAAY,KAAM,iCAAiC,CAC1D,MAAO,CAAAC,QAAQ,KAAM,gCAAgC,CACrD,MAAO,CAAAC,aAAa,KAAM,2BAA2B,CACrD,OAAQC,WAAW,KAAO,2BAA2B,CACrD,OAAQC,WAAW,CAAEC,UAAU,CAAEC,YAAY,KAAO,yBAAyB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAE9E,KAAM,CAAAC,SAAS,CAAG,UAAU,CAE5B,KAAM,CAAAC,iBAAiB,QAAS,CAAAb,SAAU,CACtCc,WAAWA,CAACC,KAAK,CAAE,CACf,KAAK,CAACA,KAAK,CAAC,MAqBhBC,gBAAgB,CAAG,IAAO,CACtB;AACAV,UAAU,CAACM,SAAS,CAAC,CAACK,IAAI,CAACC,gBAAgB,EAAI,CAC3C,GAAIA,gBAAgB,CAAC,CAAC,CAAC,GAAKd,WAAW,CAACe,OAAO,CAAE,CAC7C;AACA,GAAI,IAAI,CAACC,KAAK,CAACC,eAAe,GAAKH,gBAAgB,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAE,CAChEI,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CACtC,CAAC,IAAM,CACHD,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,CACjC,CAEA,IAAI,CAACC,QAAQ,CAAC,CACVC,QAAQ,CAAE,IAAI,CACdJ,eAAe,CAAGH,gBAAgB,CAAC,CAAC,CAAC,CAAC,UAAU,CACpD,CAAC,CAAC,CACFI,OAAO,CAACC,GAAG,CAACL,gBAAgB,CAAC,CAAC,CAAC,CAAC,CACpC,CAAC,IAAM,CACH,IAAI,CAACM,QAAQ,CAAC,CACVE,WAAW,CAAGR,gBAAgB,CAAC,CAAC,CAAC,CACjCS,YAAY,CAAGT,gBAAgB,CAAC,CAAC,CACrC,CAAC,CAAC,CACN,CACJ,CAAC,CAAC,CACN,CAAC,CAED;AAAA,KACAU,iBAAiB,CAAG,CAACC,aAAa,CAAEC,UAAU,GAAM,CAChD;AACA,GAAI,CAACvB,YAAY,CAACsB,aAAa,CAAC,CAAE,CAC9B,IAAI,CAACL,QAAQ,CAAC,CACVE,WAAW,CAAGtB,WAAW,CAAC2B,OAAO,CACjCJ,YAAY,CAAE,0BAClB,CAAC,CAAC,CACF,OACJ,CAEA;AACA,KAAM,CAAAK,cAAc,CAAG,CACnBC,MAAM,CAAEH,UAAU,CAClBI,OAAO,CAAE,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAC5CC,IAAI,CAAEN,aACV,CAAC,CAED;AACAxB,WAAW,CAAC2B,cAAc,CAAEpB,SAAS,CAAC,CAACK,IAAI,CAACC,gBAAgB,EAAI,CAC5D,IAAI,CAACM,QAAQ,CAAC,CACVE,WAAW,CAAGR,gBAAgB,CAAC,CAAC,CAAC,CACjCS,YAAY,CAAGT,gBAAgB,CAAC,CAAC,CACrC,CAAC,CAAC,CACN,CAAC,CAAC,CACN,CAAC,MAEDkB,sBAAsB,CAAG,IAAO,CAC5B,IAAI,CAACZ,QAAQ,CAAC,CACVE,WAAW,CAAEtB,WAAW,CAACiC,QAAQ,CACjCV,YAAY,CAAE,EAClB,CAAC,CAAC,CACN,CAAC,CA7EG,IAAI,CAACP,KAAK,CAAG,CACTK,QAAQ,CAAE,KAAK,CAEfJ,eAAe,CAAEiB,IAAI,CAErBZ,WAAW,CAAEtB,WAAW,CAACiC,QAAQ,CACjCV,YAAY,CAAE,EAClB,CAAC,CACL,CAEAY,iBAAiBA,CAAA,CAAG,CAChB,IAAI,CAACC,QAAQ,CAAGC,WAAW,CAAC,IAAM,CAC9B,IAAI,CAACzB,gBAAgB,CAAC,CAAC,CAC3B,CAAC,CAAE,IAAI,CAAC,CACZ,CAEA0B,oBAAoBA,CAAA,CAAG,CACnBC,aAAa,CAAC,IAAI,CAACH,QAAQ,CAAC,CAChC,CA6DAI,MAAMA,CAAA,CAAG,CACL,KAAM,CAACnB,QAAQ,CAAEJ,eAAe,CAAC,CAAG,IAAI,CAACD,KAAK,CAC9C,GAAI,CAACK,QAAQ,CAAE,CACX,mBACId,KAAA,QAAKkC,SAAS,CAAC,SAAS,CAAAC,QAAA,eACpBrC,IAAA,OAAAqC,QAAA,CAAI,0BAAwB,CAAI,CAAC,cACjCrC,IAAA,QAAI,CAAC,cACLE,KAAA,OAAAmC,QAAA,EAAI,uBAAqB,CAAClC,SAAS,EAAK,CAAC,EACxC,CAAC,CAEd,CAEA,mBACID,KAAA,QAAKkC,SAAS,CAAC,SAAS,CAAAC,QAAA,eACpBrC,IAAA,OAAAqC,QAAA,CAAI,0BAAwB,CAAI,CAAC,cACjCrC,IAAA,QAAI,CAAC,cACLA,IAAA,CAACP,QAAQ,EACLmB,eAAe,CAAEA,eAAgB,CACjCO,iBAAiB,CAAE,IAAI,CAACA,iBAAkB,CAC7C,CAAC,cACFnB,IAAA,QAAI,CAAC,cACLA,IAAA,CAACR,YAAY,EACT8C,UAAU,CAAE,SAAU,CACtBnB,iBAAiB,CAAE,IAAI,CAACA,iBAAkB,CAC7C,CAAC,cAEFnB,IAAA,CAACN,aAAa,EAACuB,WAAW,CAAE,IAAI,CAACN,KAAK,CAACM,WAAY,CACpCC,YAAY,CAAE,IAAI,CAACP,KAAK,CAACO,YAAa,CACtCS,sBAAsB,CAAE,IAAI,CAACA,sBAAuB,CAClE,CAAC,EACD,CAAC,CAEd,CACJ,CAEA,cAAe,CAAAvB,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}