{"ast":null,"code":"var _jsxFileName = \"/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/containers/dataset-controller.jsx\";\nimport React, { Component } from 'react';\nimport CreateObject from \"../util/CreateObject\";\nimport Datasets from \"../components/dataset/Datasets\";\nimport OperatorAlert from \"../components/alert/Alert\";\nimport { AlertMethod } from \"../components/alert/Alert\";\nimport { sendRequest, getRequest, convertInputToStringifyJSON, FetchHeaders } from \"../util/util\";\nimport { connect } from 'react-redux';\nimport { updateDatasetList } from \"../app/actions/datasetActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst serverUrl = '/api/dataset';\nconst mapStateToProps = state => ({\n  datasetList: state.dataset.datasetList\n  // Include other state properties if needed\n});\nconst mapDispatchToProps = dispatch => ({\n  updateDatasetList: newList => dispatch(updateDatasetList(newList))\n  // Include other dispatch actions if needed\n});\nclass DatasetController extends Component {\n  constructor(props) {\n    super(props);\n    this.handleGetRequest = () => {\n      // Call getRequest\n      getRequest(serverUrl).then(statusCodeAndMsg => {\n        if (statusCodeAndMsg[0] === AlertMethod.Success) {\n          const numberOfDataset = statusCodeAndMsg[2]['datasets'].length;\n          const newDatasetList = [];\n          for (let i = 0; i < numberOfDataset; i++) {\n            newDatasetList.push(statusCodeAndMsg[2]['datasets'][i]);\n          }\n\n          // Update the dataset list in Redux store\n          this.props.updateDatasetList(newDatasetList);\n        } else {\n          this.setState({\n            alertMethod: statusCodeAndMsg[0],\n            alertMessage: statusCodeAndMsg[1]\n          });\n        }\n      });\n    };\n    // handleSendRequest is a func that will call  and update the panel status\n    this.handleSendRequest = (httpMethod, dataType, inputData) => {\n      // Prep Body Data\n      let requestBody = '';\n      try {\n        requestBody = convertInputToStringifyJSON(dataType, inputData);\n      } catch (error) {\n        this.setState({\n          alertMethod: AlertMethod.Warning,\n          alertMessage: 'This is not a Valid Input. ' + error\n        });\n        return;\n      }\n\n      // Prep Http request\n      const requestOptions = {\n        method: httpMethod,\n        headers: FetchHeaders,\n        body: requestBody\n      };\n\n      // Call sendRequest\n      sendRequest(requestOptions, serverUrl).then(statusCodeAndMsg => {\n        this.setState({\n          alertMethod: statusCodeAndMsg[0],\n          alertMessage: statusCodeAndMsg[1]\n        });\n      });\n    };\n    this.handleCleanAlertStatus = () => {\n      this.setState({\n        alertMethod: AlertMethod.NoStatus,\n        alertMessage: ''\n      });\n    };\n    this.state = {\n      datasetList: [],\n      alertMethod: AlertMethod.NoStatus,\n      alertMessage: ''\n    };\n  }\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.handleGetRequest();\n    }, 2000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Dataset\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Dataset Controller Panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CreateObject, {\n        objectKind: 'Dataset',\n        handleSendRequest: this.handleSendRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Datasets\n      //datasetList={this.state.datasetList}\n      , {\n        handleSendRequest: this.handleSendRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(OperatorAlert, {\n        alertMethod: this.state.alertMethod,\n        alertMessage: this.state.alertMessage,\n        handleCleanAlertStatus: this.handleCleanAlertStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(DatasetController);","map":{"version":3,"names":["React","Component","CreateObject","Datasets","OperatorAlert","AlertMethod","sendRequest","getRequest","convertInputToStringifyJSON","FetchHeaders","connect","updateDatasetList","jsxDEV","_jsxDEV","serverUrl","mapStateToProps","state","datasetList","dataset","mapDispatchToProps","dispatch","newList","DatasetController","constructor","props","handleGetRequest","then","statusCodeAndMsg","Success","numberOfDataset","length","newDatasetList","i","push","setState","alertMethod","alertMessage","handleSendRequest","httpMethod","dataType","inputData","requestBody","error","Warning","requestOptions","method","headers","body","handleCleanAlertStatus","NoStatus","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","objectKind"],"sources":["/Users/shoukaiwen/WebstormProjects/alluxio-k8s-operator-ui/src/containers/dataset-controller.jsx"],"sourcesContent":["import React, { Component} from 'react';\nimport CreateObject from \"../util/CreateObject\";\nimport Datasets from \"../components/dataset/Datasets\";\nimport OperatorAlert from \"../components/alert/Alert\";\nimport {AlertMethod} from \"../components/alert/Alert\";\nimport {sendRequest, getRequest, convertInputToStringifyJSON, FetchHeaders} from \"../util/util\";\nimport { connect } from 'react-redux';\nimport { updateDatasetList} from \"../app/actions/datasetActions\";\n\nconst serverUrl = '/api/dataset'\n\nconst mapStateToProps = state => ({\n    datasetList: state.dataset.datasetList,\n    // Include other state properties if needed\n});\n\nconst mapDispatchToProps = dispatch => ({\n    updateDatasetList: (newList) => dispatch(updateDatasetList(newList)),\n    // Include other dispatch actions if needed\n});\n\nclass DatasetController extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            datasetList: [],\n\n            alertMethod: AlertMethod.NoStatus,\n            alertMessage: '',\n        };\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.handleGetRequest()\n        }, 2000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    handleGetRequest = () =>  {\n        // Call getRequest\n        getRequest(serverUrl).then(statusCodeAndMsg => {\n            if (statusCodeAndMsg[0] === AlertMethod.Success) {\n                const numberOfDataset = statusCodeAndMsg[2]['datasets'].length\n                const newDatasetList = [];\n                for (let i = 0; i < numberOfDataset; i++) {\n                    newDatasetList.push(statusCodeAndMsg[2]['datasets'][i])\n                }\n\n                // Update the dataset list in Redux store\n                this.props.updateDatasetList(newDatasetList);\n            } else {\n                this.setState({\n                    alertMethod : statusCodeAndMsg[0],\n                    alertMessage : statusCodeAndMsg[1],\n                })\n            }\n        })\n    }\n\n    // handleSendRequest is a func that will call  and update the panel status\n    handleSendRequest = (httpMethod, dataType, inputData) =>  {\n        // Prep Body Data\n        let requestBody = '';\n        try {\n             requestBody = convertInputToStringifyJSON(dataType, inputData)\n        } catch (error) {\n            this.setState({\n                alertMethod : AlertMethod.Warning,\n                alertMessage: 'This is not a Valid Input. ' + error,\n            })\n            return\n        }\n\n        // Prep Http request\n        const requestOptions = {\n            method: httpMethod,\n            headers: FetchHeaders,\n            body: requestBody,\n        };\n\n        // Call sendRequest\n        sendRequest(requestOptions, serverUrl).then(statusCodeAndMsg => {\n            this.setState({\n                alertMethod : statusCodeAndMsg[0],\n                alertMessage : statusCodeAndMsg[1],\n            })\n        })\n    }\n\n    handleCleanAlertStatus = () =>  {\n        this.setState({\n            alertMethod: AlertMethod.NoStatus,\n            alertMessage: '',\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Dataset\">\n                <h1>Dataset Controller Panel</h1>\n                <br/>\n                <CreateObject\n                    objectKind={'Dataset'}\n                    handleSendRequest={this.handleSendRequest}\n                />\n                <br/>\n                <Datasets\n                    //datasetList={this.state.datasetList}\n                    handleSendRequest={this.handleSendRequest}\n                />\n\n                <OperatorAlert alertMethod={this.state.alertMethod}\n                               alertMessage={this.state.alertMessage}\n                               handleCleanAlertStatus={this.handleCleanAlertStatus}\n                />\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DatasetController);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}